{"ast":null,"code":"var _jsxFileName = \"/home/cbellee/repos/github/cbellee/shutter-quote-app/src/components/WindowInputs.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { Button, Icon, Grid, Form, Input, Label, Segment } from \"semantic-ui-react\";\nimport './window.css';\n\nconst WindowInputs = ({\n  idx,\n  windowState,\n  handleWindowChange,\n  handleWindowRemove\n}) => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm();\n  const nameId = `name-${idx}`;\n  const widthId = `width-${idx}`;\n  const heightId = `height-${idx}`;\n  const panelId = `panel-${idx}`;\n  const materialId = `material-${idx}`;\n  const priceId = `price-${idx}`;\n  const notesId = `notes-${idx}`;\n  const removeButtonId = `removeButton-${idx}`;\n  const materialData = [{\n    text: 'wood',\n    value: 'wood'\n  }, {\n    text: 'pvc',\n    value: 'pvc'\n  }];\n  const minHeight = 300;\n  const minWidth = 400;\n  const maxHeight = 10000;\n  const maxWidth = 10000;\n  const displayWidth = 400;\n  var maxPanels = 4;\n  const panelData = [];\n  const items = [];\n  let itemList = [];\n\n  function ValidateWindowInputFields(height, width) {\n    var h = height;\n    var w = width;\n\n    if (height === \"\" || height < minHeight) {\n      h = minHeight;\n    }\n\n    if (height > maxHeight) {\n      h = maxHeight;\n    }\n\n    if (width === \"\" || width < minWidth) {\n      w = minWidth;\n    }\n\n    if (width > maxWidth) {\n      w = maxWidth;\n    }\n\n    return {\n      height: h,\n      width: w\n    };\n  }\n\n  for (var i = 1; i <= maxPanels; i++) {\n    panelData.push({\n      text: i,\n      value: i\n    });\n  }\n\n  var res = ValidateWindowInputFields(windowState[idx].height, windowState[idx].width);\n  let widthRatio = res.width / displayWidth;\n  let newHeight = res.height / widthRatio;\n  var panelSpacing = displayWidth / windowState[idx].panel;\n\n  for (let i = 0; i < windowState[idx].panel - 1; i++) {\n    items.push(itemList[i]);\n  }\n\n  return React.createElement(\"div\", {\n    key: `window-${idx}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    columns: 3,\n    padded: \"vertically\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"input\", {\n    name: nameId,\n    \"data-idx\": idx,\n    id: nameId,\n    className: \"name\",\n    ref: register({\n      required: true\n    }),\n    value: windowState[idx].name,\n    onChange: handleWindowChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), errors.nameId && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Height (mm)\"), React.createElement(\"input\", {\n    name: heightId,\n    \"data-idx\": idx,\n    id: heightId,\n    className: \"height\",\n    ref: register({\n      required: true\n    }),\n    value: windowState[idx].height,\n    onChange: handleWindowChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), errors.heightId && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Width (mm)\"), React.createElement(\"input\", {\n    name: widthId,\n    \"data-idx\": idx,\n    id: widthId,\n    className: \"width\",\n    ref: register({\n      required: true\n    }),\n    value: windowState[idx].width,\n    onChange: handleWindowChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), errors.widthId && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Number of Shutters\"), React.createElement(\"input\", {\n    type: \"number\",\n    min: 2,\n    max: 4,\n    name: panelId,\n    \"data-idx\": idx,\n    id: panelId,\n    className: \"panel\",\n    ref: register({\n      required: true\n    }),\n    value: windowState[idx].panel,\n    onChange: handleWindowChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), errors.panelId && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Material\"), React.createElement(\"select\", {\n    name: materialId,\n    \"data-idx\": idx,\n    id: materialId,\n    value: {\n      materialData\n    },\n    className: \"material\",\n    value: windowState[idx].material,\n    ref: register({\n      required: true\n    }),\n    onChange: handleWindowChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"wood\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Wood\"), React.createElement(\"option\", {\n    value: \"pvc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Pvc\")), errors.materialId && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Price\"), React.createElement(\"input\", {\n    name: priceId,\n    \"data-idx\": idx,\n    id: priceId,\n    className: \"price\",\n    ref: register({\n      required: true\n    }),\n    value: windowState[idx].price,\n    onChange: handleWindowChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), errors.priceId && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"windowContainer\",\n    style: {\n      height: newHeight,\n      width: displayWidth\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, items.map((value, index) => {\n    var pSpacing = panelSpacing * (index + 1) - (index + 1);\n    return React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        left: pSpacing\n      },\n      key: index,\n      className: 'windowItem ' + value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    });\n  }))), React.createElement(Grid.Row, {\n    columns: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"textarea\", {\n    name: notesId,\n    \"data-idx\": idx,\n    id: notesId,\n    className: \"notes\",\n    value: windowState[idx].notes,\n    onChange: handleWindowChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  })))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(Button, {\n    floated: \"left\",\n    icon: true,\n    labelPosition: \"left\",\n    color: \"red\",\n    size: \"small\",\n    onClick: handleWindowRemove,\n    name: removeButtonId,\n    \"data-idx\": idx,\n    id: removeButtonId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), \" Remove Window\")))))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }));\n};\n\nWindowInputs.propTypes = {\n  idx: PropTypes.number,\n  windowState: PropTypes.array,\n  handleWindowChange: PropTypes.func\n};\nexport default WindowInputs;","map":{"version":3,"sources":["/home/cbellee/repos/github/cbellee/shutter-quote-app/src/components/WindowInputs.js"],"names":["React","PropTypes","useForm","Button","Icon","Grid","Form","Input","Label","Segment","WindowInputs","idx","windowState","handleWindowChange","handleWindowRemove","register","handleSubmit","watch","errors","nameId","widthId","heightId","panelId","materialId","priceId","notesId","removeButtonId","materialData","text","value","minHeight","minWidth","maxHeight","maxWidth","displayWidth","maxPanels","panelData","items","itemList","ValidateWindowInputFields","height","width","h","w","i","push","res","widthRatio","newHeight","panelSpacing","panel","required","name","material","price","map","index","pSpacing","position","left","notes","propTypes","number","array","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { Button, Icon, Grid, Form, Input, Label, Segment } from \"semantic-ui-react\";\nimport './window.css';\n\nconst WindowInputs = ({ idx, windowState, handleWindowChange, handleWindowRemove }) => {\n    const { register, handleSubmit, watch, errors } = useForm();\n    const nameId = `name-${idx}`;\n    const widthId = `width-${idx}`;\n    const heightId = `height-${idx}`;\n    const panelId = `panel-${idx}`;\n    const materialId = `material-${idx}`;\n    const priceId = `price-${idx}`;\n    const notesId = `notes-${idx}`;\n    const removeButtonId = `removeButton-${idx}`;\n    const materialData = [{ text: 'wood', value: 'wood' }, { text: 'pvc', value: 'pvc' }];\n    const minHeight = 300;\n    const minWidth = 400;\n    const maxHeight = 10000;\n    const maxWidth = 10000;\n    const displayWidth = 400;\n\n    var maxPanels = 4;\n    const panelData = [];\n    const items = [];\n    let itemList = [];\n\n    function ValidateWindowInputFields(height, width) {\n        var h = height;\n        var w = width;\n\n        if (height === \"\" || height < minHeight) {\n            h = minHeight;\n        }\n\n        if (height > maxHeight) {\n            h = maxHeight;\n        }\n\n        if (width === \"\" || width < minWidth) {\n            w = minWidth;\n        }\n\n        if (width > maxWidth) {\n            w = maxWidth;\n        }\n\n        return { height: h, width: w };\n    }\n\n    for (var i = 1; i <= maxPanels; i++) {\n        panelData.push({ text: i, value: i });\n    }\n\n    var res = ValidateWindowInputFields(windowState[idx].height, windowState[idx].width)\n\n    let widthRatio = res.width / displayWidth;\n    let newHeight = res.height / widthRatio;\n    var panelSpacing = displayWidth / windowState[idx].panel;\n\n    for (let i = 0; i < windowState[idx].panel - 1; i++) {\n        items.push(itemList[i]);\n    }\n\n    return (\n        <div key={`window-${idx}`}>\n            <Segment>\n                <Grid columns={3} padded=\"vertically\">\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Name</label>\n                            <input\n                                name={nameId}\n                                data-idx={idx}\n                                id={nameId}\n                                className=\"name\"\n                                ref={register({ required: true })}\n                                value={windowState[idx].name}\n                                onChange={handleWindowChange}\n                            />\n                            {errors.nameId && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field >\n                            <label>Height (mm)</label>\n                            <input\n                                name={heightId}\n                                data-idx={idx}\n                                id={heightId}\n                                className=\"height\"\n                                ref={register({ required: true })}\n                                value={windowState[idx].height}\n                                onChange={handleWindowChange}\n                            />\n                            {errors.heightId && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Width (mm)</label>\n                            <input\n                                name={widthId}\n                                data-idx={idx}\n                                id={widthId}\n                                className=\"width\"\n                                ref={register({ required: true })}\n                                value={windowState[idx].width}\n                                onChange={handleWindowChange}\n                            />\n                            {errors.widthId && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field >\n                            <label>Number of Shutters</label>\n                            <input\n                                type=\"number\"\n                                min={2}\n                                max={4}\n                                name={panelId}\n                                data-idx={idx}\n                                id={panelId}\n                                className=\"panel\"\n                                ref={register({ required: true })}\n                                value={windowState[idx].panel}\n                                onChange={handleWindowChange}\n                            />\n                            {errors.panelId && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field >\n                            <label className=\"material\">Material</label>\n                            <select\n                                name={materialId}\n                                data-idx={idx}\n                                id={materialId}\n                                value={{ materialData }}\n                                className=\"material\"\n                                value={windowState[idx].material}\n                                ref={register({ required: true })}\n                                onChange={handleWindowChange}>\n                                <option value=\"wood\">Wood</option>\n                                <option value=\"pvc\">Pvc</option>\n                            </select>\n                            {errors.materialId && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field >\n                            <label>Price</label>\n                            <input\n                                name={priceId}\n                                data-idx={idx}\n                                id={priceId}\n                                className=\"price\"\n                                ref={register({ required: true })}\n                                value={windowState[idx].price}\n                                onChange={handleWindowChange}\n                            />\n                            {errors.priceId && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Row>\n                        <div id=\"windowContainer\" style={{ height: newHeight, width: displayWidth }}>\n                            {items.map((value, index) => {\n                                var pSpacing = (panelSpacing * (index + 1) - ((index + 1)));\n                                return <div style={{ position: \"relative\", left: pSpacing }} key={index} className={'windowItem ' + value}>\n                                </div>\n                            })}\n                        </div>\n                    </Grid.Row>\n                    <Grid.Row columns={1}>\n                        <Grid.Column >\n                            <Form.Field>\n                                <label>Notes</label>\n                                <textarea\n                                    name={notesId}\n                                    data-idx={idx}\n                                    id={notesId}\n                                    className=\"notes\"\n                                    value={windowState[idx].notes}\n                                    onChange={handleWindowChange}\n                                />\n                            </Form.Field>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Form.Field>\n                                <Button\n                                    floated=\"left\"\n                                    icon\n                                    labelPosition=\"left\"\n                                    color=\"red\"\n                                    size=\"small\"\n                                    onClick={handleWindowRemove}\n                                    name={removeButtonId}\n                                    data-idx={idx}\n                                    id={removeButtonId}>\n                                    <Icon name=\"edit\" /> Remove Window\n                                </Button>\n                            </Form.Field>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            <br />\n        </div >\n    );\n};\n\nWindowInputs.propTypes = {\n    idx: PropTypes.number,\n    windowState: PropTypes.array,\n    handleWindowChange: PropTypes.func,\n};\n\nexport default WindowInputs;\n"]},"metadata":{},"sourceType":"module"}