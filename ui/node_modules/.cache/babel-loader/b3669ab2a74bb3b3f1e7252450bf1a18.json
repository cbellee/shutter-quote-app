{"ast":null,"code":"var _jsxFileName = \"/home/cbellee/repos/github/cbellee/shutter-quote-app/ui/src/components/QuoteDetailForm.js\";\nimport React, { useState, useContext } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport WindowInputs from './WindowInputs';\nimport { useForm } from 'react-hook-form';\nimport { UpdateQuoteToLocalStorage, GetQuotesFromLocalStorage, GetPostCodeFromSuburb, GetSuburbList } from '../helpers/Helpers';\nimport { Segment, Form, Icon, Input, Button, Grid, Card, GridRow, GridColumn } from \"semantic-ui-react\";\nimport seedData from '../helpers/SeedData';\nimport PostCodeContext from './PostCodeContext';\nconst dateCreated = new Date().toISOString();\nexport default function ({\n  match\n}) {\n  const {\n    params: {\n      quoteId\n    }\n  } = match;\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors\n  } = useForm();\n  let quotes = GetQuotesFromLocalStorage('quotes', seedData);\n  let quote = quotes.filter(quote => quote.id == quoteId)[0];\n  const postCodes = useContext(PostCodeContext)[0];\n  var stateName = \"NSW\";\n  var suburbs = GetSuburbList(postCodes, stateName);\n  const [quoteState, setQuoteState] = useState(quote);\n  const [windowState, setWindowState] = useState(quote.windows);\n\n  const handleQuoteChange = e => setQuoteState({ ...quoteState,\n    [e.target.name]: e.target.value\n  });\n\n  const handleSuburbChange = e => setQuoteState({ ...quoteState,\n    postCode: GetPostCodeFromSuburb(postCodes, e.target.value),\n    [e.target.name]: e.target.value\n  });\n\n  const handleTotalChange = e => {\n    const updateWindows = [...windowState];\n    quoteState.windows = windowState;\n    console.log(\"totalCostQuote: \" + JSON.stringify(quoteState));\n    var totalCost = 0;\n    quoteState.windows.map(window => {\n      if (parseInt(window.price) != '' || parseInt(window.price) != null) {\n        totalCost = totalCost + parseInt(window.price);\n      }\n    });\n    console.log(\"totalCost: \" + totalCost);\n    quoteState.total = totalCost;\n    setQuoteState(quoteState);\n  };\n\n  console.log(\"quoteId: \" + quoteId);\n  console.log(\"quote state: \" + JSON.stringify(quoteState.quote));\n  console.log(\"window state: \" + JSON.stringify(windowState));\n  const blankWindow = {\n    name: '',\n    width: '2400',\n    height: '1200',\n    panel: '2'\n  };\n\n  const addWindow = () => {\n    setWindowState([...windowState, { ...blankWindow\n    }]);\n  };\n\n  const [redirectToQuotes, setRedirectToQuotes] = useState(false);\n\n  const handleWindowChange = e => {\n    const updatedWindows = [...windowState];\n    console.log(JSON.stringify(updatedWindows));\n    updatedWindows[e.target.dataset.idx][e.target.className] = e.target.value;\n    setWindowState(updatedWindows);\n  };\n\n  const handleWindowRemove = e => {\n    const updatedWindows = [...windowState];\n    console.log(\"updated windows: \" + JSON.stringify(updatedWindows));\n    console.log(\"deleted window index: \" + e.target.dataset.idx);\n    updatedWindows.splice(e.target.dataset.idx, 1);\n    setWindowState(updatedWindows);\n    console.log(\"updated windows: \" + JSON.stringify(updatedWindows));\n  };\n\n  const onSubmit = () => {\n    quoteState.windows = windowState;\n    var totalCost = 0;\n    quoteState.windows.map(window => {\n      totalCost = totalCost + parseInt(window.price);\n    });\n    quoteState.total = totalCost;\n    UpdateQuoteToLocalStorage('quotes', quoteState, seedData);\n    setRedirectToQuotes(true);\n  };\n\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, redirectToQuotes ? React.createElement(Redirect, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }) : null, React.createElement(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    columns: 3,\n    padded: \"vertically\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"First Name\"), React.createElement(\"input\", {\n    label: \"First Name\",\n    type: \"text\",\n    name: \"firstName\",\n    id: \"firstName\",\n    ref: register({\n      required: true\n    }),\n    value: quoteState.firstName,\n    onChange: handleQuoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), errors.firstName && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Last Name\"), React.createElement(\"input\", {\n    label: \"Last Name\",\n    type: \"text\",\n    name: \"lastName\",\n    id: \"lastName\",\n    ref: register({\n      required: true,\n      minLength: 3,\n      maxLength: 40\n    }),\n    value: quoteState.lastName,\n    onChange: handleQuoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), errors.lastName && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"input\", {\n    label: \"Email\",\n    type: \"text\",\n    name: \"email\",\n    id: \"email\",\n    ref: register({\n      required: true,\n      pattern: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\n    }),\n    value: quoteState.email,\n    onChange: handleQuoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), errors.email && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"valid email address is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Phone\"), React.createElement(\"input\", {\n    label: \"Phone\",\n    type: \"text\",\n    name: \"phone\",\n    id: \"phone\",\n    ref: register({\n      required: true,\n      minLength: 10,\n      maxLength: 14\n    }),\n    value: quoteState.phone,\n    onChange: handleQuoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), errors.phone && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Street\"), React.createElement(\"input\", {\n    label: \"Street\",\n    type: \"text\",\n    name: \"street\",\n    id: \"street\",\n    ref: register({\n      required: true,\n      minLength: 3,\n      maxLength: 40\n    }),\n    value: quoteState.street,\n    onChange: handleQuoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), errors.street && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"This field is required\"))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Suburb\"), React.createElement(\"select\", {\n    label: \"Suburb\",\n    name: \"suburb\",\n    id: \"suburb\",\n    value: quoteState.suburb,\n    onChange: handleSuburbChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, suburbs.map(suburb => React.createElement(\"option\", {\n    key: suburb.text,\n    value: suburb.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, suburb.value))))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"PostCode\"), React.createElement(\"input\", {\n    label: \"Postcode\",\n    type: \"text\",\n    name: \"postCode\",\n    id: \"postCode\",\n    value: quoteState.postCode,\n    onChange: handleQuoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }))), React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"Total\"), React.createElement(\"input\", {\n    label: \"Total\",\n    type: \"text\",\n    name: \"total\",\n    id: \"total\",\n    defaultValue: quoteState.total || \"\",\n    onChange: handleQuoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(Button, {\n    floated: \"left\",\n    icon: true,\n    labelPosition: \"left\",\n    color: \"blue\",\n    size: \"small\",\n    onClick: addWindow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }), \" Add Window\")), React.createElement(Form.Field, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, React.createElement(Button, {\n    floated: \"left\",\n    icon: true,\n    labelPosition: \"left\",\n    color: \"green\",\n    size: \"small\",\n    onClick: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    name: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }), \" Save Quote\")))))), React.createElement(Grid, {\n    columns: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, windowState.map((val, idx) => React.createElement(WindowInputs, {\n    key: `window-${idx}`,\n    idx: idx,\n    windowState: windowState,\n    handleWindowChange: handleWindowChange,\n    handleWindowRemove: handleWindowRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  })))));\n}\n;","map":{"version":3,"sources":["/home/cbellee/repos/github/cbellee/shutter-quote-app/ui/src/components/QuoteDetailForm.js"],"names":["React","useState","useContext","Redirect","WindowInputs","useForm","UpdateQuoteToLocalStorage","GetQuotesFromLocalStorage","GetPostCodeFromSuburb","GetSuburbList","Segment","Form","Icon","Input","Button","Grid","Card","GridRow","GridColumn","seedData","PostCodeContext","dateCreated","Date","toISOString","match","params","quoteId","register","handleSubmit","watch","errors","quotes","quote","filter","id","postCodes","stateName","suburbs","quoteState","setQuoteState","windowState","setWindowState","windows","handleQuoteChange","e","target","name","value","handleSuburbChange","postCode","handleTotalChange","updateWindows","console","log","JSON","stringify","totalCost","map","window","parseInt","price","total","blankWindow","width","height","panel","addWindow","redirectToQuotes","setRedirectToQuotes","handleWindowChange","updatedWindows","dataset","idx","className","handleWindowRemove","splice","onSubmit","required","firstName","minLength","maxLength","lastName","pattern","email","phone","street","suburb","text","val"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport WindowInputs from './WindowInputs';\nimport { useForm } from 'react-hook-form';\nimport { UpdateQuoteToLocalStorage, GetQuotesFromLocalStorage, GetPostCodeFromSuburb, GetSuburbList } from '../helpers/Helpers';\nimport { Segment, Form, Icon, Input, Button, Grid, Card, GridRow, GridColumn } from \"semantic-ui-react\";\nimport seedData from '../helpers/SeedData';\nimport PostCodeContext from './PostCodeContext';\n\nconst dateCreated = new Date().toISOString();\n\nexport default function ({ match }) {\n    const {\n        params: { quoteId },\n    } = match;\n\n    const { register, handleSubmit, watch, errors } = useForm()\n\n    let quotes = GetQuotesFromLocalStorage('quotes', seedData);\n    let quote = quotes.filter((quote) => quote.id == quoteId)[0];\n\n    const postCodes = useContext(PostCodeContext)[0];\n    var stateName = \"NSW\"\n    var suburbs = GetSuburbList(postCodes, stateName);\n\n    const [quoteState, setQuoteState] = useState(\n        quote,\n    );\n\n    const [windowState, setWindowState] = useState(\n        quote.windows,\n    );\n\n    const handleQuoteChange = (e) => setQuoteState({\n        ...quoteState,\n        [e.target.name]: e.target.value,\n    });\n\n    const handleSuburbChange = (e) => setQuoteState({\n        ...quoteState,\n        postCode: GetPostCodeFromSuburb(postCodes, e.target.value),\n        [e.target.name]: e.target.value,\n    });\n\n    const handleTotalChange = (e) => {\n        const updateWindows = [...windowState];\n        quoteState.windows = windowState;\n        console.log(\"totalCostQuote: \" + JSON.stringify(quoteState));\n        var totalCost = 0;\n        quoteState.windows.map((window) => {\n            if (parseInt(window.price) != '' || parseInt(window.price) != null) {\n                totalCost = totalCost + parseInt(window.price);\n            }\n        });\n        console.log(\"totalCost: \" + totalCost);\n        quoteState.total = totalCost;\n        setQuoteState(quoteState);\n    }\n\n    console.log(\"quoteId: \" + quoteId);\n    console.log(\"quote state: \" + JSON.stringify(quoteState.quote));\n    console.log(\"window state: \" + JSON.stringify(windowState));\n\n    const blankWindow = { name: '', width: '2400', height: '1200', panel: '2' };\n    const addWindow = () => {\n        setWindowState([...windowState, { ...blankWindow }]);\n    };\n\n    const [redirectToQuotes, setRedirectToQuotes] = useState(false);\n\n    const handleWindowChange = (e) => {\n        const updatedWindows = [...windowState];\n        console.log(JSON.stringify(updatedWindows));\n        updatedWindows[e.target.dataset.idx][e.target.className] = e.target.value;\n        setWindowState(updatedWindows);\n    };\n\n    const handleWindowRemove = (e) => {\n        const updatedWindows = [...windowState];\n        console.log(\"updated windows: \" + JSON.stringify(updatedWindows));\n        console.log(\"deleted window index: \" + e.target.dataset.idx);\n        updatedWindows.splice(e.target.dataset.idx, 1);\n        setWindowState(updatedWindows);\n        console.log(\"updated windows: \" + JSON.stringify(updatedWindows));\n    }\n\n    const onSubmit = () => {\n        quoteState.windows = windowState;\n        var totalCost = 0;\n        quoteState.windows.map((window) => {\n            totalCost = totalCost + parseInt(window.price);\n        });\n        quoteState.total = totalCost;\n        UpdateQuoteToLocalStorage('quotes', quoteState, seedData);\n        setRedirectToQuotes(true);\n    }\n\n    return (\n        <Form>\n            {redirectToQuotes ? <Redirect to=\"/\" /> : null}\n            <Segment>\n                <Grid columns={3} padded=\"vertically\">\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>First Name</label>\n                            <input\n                                label=\"First Name\"\n                                type=\"text\"\n                                name=\"firstName\"\n                                id=\"firstName\"\n                                ref={register({ required: true })}\n                                value={quoteState.firstName}\n                                onChange={handleQuoteChange}\n                            />\n                            {errors.firstName && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Last Name</label>\n                            <input\n                                label=\"Last Name\"\n                                type=\"text\"\n                                name=\"lastName\"\n                                id=\"lastName\"\n                                ref={register({ required: true, minLength: 3, maxLength: 40 })}\n                                value={quoteState.lastName}\n                                onChange={handleQuoteChange}\n                            />\n                            {errors.lastName && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Email</label>\n                            <input\n                                label=\"Email\"\n                                type=\"text\"\n                                name=\"email\"\n                                id=\"email\"\n                                ref={register({ required: true, pattern: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/ })}\n                                value={quoteState.email}\n                                onChange={handleQuoteChange}\n                            />\n                            {errors.email && <span>valid email address is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Phone</label>\n                            <input\n                                label=\"Phone\"\n                                type=\"text\"\n                                name=\"phone\"\n                                id=\"phone\"\n                                ref={register({ required: true, minLength: 10, maxLength: 14, })}\n                                value={quoteState.phone}\n                                onChange={handleQuoteChange}\n                            />\n                            {errors.phone && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Street</label>\n                            <input\n                                label=\"Street\"\n                                type=\"text\"\n                                name=\"street\"\n                                id=\"street\"\n                                ref={register({ required: true, minLength: 3, maxLength: 40 })}\n                                value={quoteState.street}\n                                onChange={handleQuoteChange}\n                            />\n                            {errors.street && <span>This field is required</span>}\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Suburb</label>\n                            <select\n                                label=\"Suburb\"\n                                name=\"suburb\"\n                                id=\"suburb\"\n                                value={quoteState.suburb}\n                                onChange={handleSuburbChange}>\n                                {suburbs.map((suburb) => <option key={suburb.text} value={suburb.value}>{suburb.value}</option>)}\n                            </select>\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>PostCode</label>\n                            <input\n                                label=\"Postcode\"\n                                type=\"text\"\n                                name=\"postCode\"\n                                id=\"postCode\"\n                                value={quoteState.postCode}\n                                onChange={handleQuoteChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Total</label>\n                            <input\n                                label=\"Total\"\n                                type=\"text\"\n                                name=\"total\"\n                                id=\"total\"\n                                defaultValue={quoteState.total || \"\"}\n                                onChange={handleQuoteChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Form.Field>\n                                <Button\n                                    floated=\"left\"\n                                    icon\n                                    labelPosition=\"left\"\n                                    color=\"blue\"\n                                    size=\"small\"\n                                    onClick={addWindow}>\n                                    <Icon name=\"edit\" /> Add Window\n                        </Button>\n                            </Form.Field>\n                            <Form.Field>\n                                <Button\n                                    floated=\"left\"\n                                    icon\n                                    labelPosition=\"left\"\n                                    color=\"green\"\n                                    size=\"small\"\n                                    onClick={handleSubmit(onSubmit)}>\n                                    <Icon name=\"edit\" /> Save Quote\n                        </Button>\n                            </Form.Field>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n            <Grid columns={1}>\n                <Grid.Column>\n                    {\n                        windowState.map((val, idx) => (\n                            <WindowInputs\n                                key={`window-${idx}`}\n                                idx={idx}\n                                windowState={windowState}\n                                handleWindowChange={handleWindowChange}\n                                handleWindowRemove={handleWindowRemove}\n                            />\n                        ))\n                    }\n                </Grid.Column>\n            </Grid>\n        </Form>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}