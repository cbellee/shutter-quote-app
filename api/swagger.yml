openapi: 3.0.1
info:
  title: Swagger Quotes
  description: Quote app API
  termsOfService: http://swagger.io/terms/
  contact:
    email: cbellee@microsoft.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://quote.swagger.io/v2
- url: http://quote.swagger.io/v2
tags:
- name: quote
  description: Performs operations on Quotes
  externalDocs:
    description: Find out more
    url: http://swagger.io
paths:
  /customer:
    get:
      tags:
      - customer
      summary: Get all customers
      description: Returns all customers
      operationId: getCustomers
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/customer'
        400:
          description: No customers found
          content: {}
        404:
          description: No customers found
          content: {}
    post:
      tags:
      - customer
      summary: Add a new customer
      operationId: addCustomer
      requestBody:
        description: Customer object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/customer'
        required: true
      responses:
        200:
          description: list the customers
          content:
            application/xml:
              schema:
                  $ref: '#/components/schemas/customer'
            application/json:
              schema:
                  $ref: '#/components/schemas/customer'
        default:
          description: generic error response
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/error'
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /quote:
    get:
      tags:
      - quote
      summary: Get all quotes
      description: Returns all quotes
      operationId: getQuotes
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/quote'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/quote'
        400:
          description: No quotes found
          content: {}
        404:
          description: No quotes found
          content: {}
    post:
      tags:
      - quote
      summary: Add a new quote
      operationId: addQuote
      requestBody:
        description: Quote object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quote'
          application/xml:
            schema:
              $ref: '#/components/schemas/quote'
        required: true
      responses:
        200:
          description: list the quotes
          content:
            application/xml:
              schema:
                  $ref: '#/components/schemas/quote'
            application/json:
              schema:
                  $ref: '#/components/schemas/quote'
        default:
          description: generic error response
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/error'
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /customer/{customerId}:
    get:
      tags:
      - customer
      summary: Find customer by ID
      description: Returns a single customer
      operationId: getCustomerByID
      parameters:
      - name: customerId
        in: path
        description: ID of customer to return
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/customer'
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Quote not found
          content: {}
    post:
      tags:
      - quote
      summary: Update an existing customer
      operationId: updateCustomerByID
      parameters:
      - in: path
        name: customerId
        description: ID of customer that needs to be updated
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: Customer object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/customer'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Customer not found
          content: {}
        405:
          description: Validation exception
          content: {}
    delete:
      tags:
      - quotecustoemr
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: customerId
        in: path
        description: Customer id to delete
        required: true
        schema:
          type: integer
          format: int32
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Customer not found
          content: {}
  /quote/{quoteId}:
    get:
      tags:
      - quote
      summary: Find quote by ID
      description: Returns a single quote
      operationId: getQuoteByID
      parameters:
      - name: quoteId
        in: path
        description: ID of quote to return
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/quote'
            application/json:
              schema:
                $ref: '#/components/schemas/quote'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Quote not found
          content: {}
    post:
      tags:
      - quote
      summary: Update an existing quote
      operationId: updateQuoteByID
      parameters:
      - in: path
        name: quoteId
        description: ID of quote that needs to be updated
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: Quote object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quote'
          application/xml:
            schema:
              $ref: '#/components/schemas/quote'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Quote not found
          content: {}
        405:
          description: Validation exception
          content: {}
    delete:
      tags:
      - quote
      summary: Delete a quote
      operationId: deleteQuote
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: quoteId
        in: path
        description: Quote id to delete
        required: true
        schema:
          type: integer
          format: int32
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Quote not found
          content: {}
components:
  schemas:
    tag:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
      xml:
        name: tag
    quote:
      required:
      - customerId
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1000
        customerId:
          type: integer
        windows:
          type: array
          example: ""
          items:
            $ref: '#/components/schemas/window'
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/tag'
      xml:
        name: quote
    window:
      required:
      - height
      - material
      - name
      - panel
      - price
      - width
      type: object
      properties:
        name:
          type: string
          example: Lounge window A
        height:
          type: integer
          example: 1200
        width:
          type: integer
          example: 2400
        notes:
          type: string
          example: a description of the window
        price:
          type: number
          example: 560.45
        material:
          type: string
          example: wood
        panel:
          type: integer
          example: 3
    customer:
      required:
      - email
      - firstname
      - lastname
      - address
      - phone
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1000
        email: 
          type: string
        firstname: 
          type: string
        lastname: 
          type: string
        address: 
          type: object
          items:
            $ref: '#/components/schemas/address'
        phone: 
          type: string
    address: 
      required:
      - street
      - suburb
      - city
      - postcode
      properties:
        street: 
          type: string
        suburb: 
          type: string
        city: 
          type: string
        postcode: 
          type: string
    error:
      required:
      - code
      - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
