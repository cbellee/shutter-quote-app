{"ast":null,"code":"export function GetQuotesFromLocalStorage(quotesName, seedData) {\n  try {\n    var jsonQuotes = localStorage.getItem(quotesName);\n\n    if (jsonQuotes === '') {\n      localStorage.setItem(quotesName, JSON.stringify(seedData));\n      console.log(\"setting local storage from 'seedData'\");\n      jsonQuotes = localStorage.getItem(quotesName);\n    }\n\n    return JSON.parse(jsonQuotes);\n  } catch (err) {\n    console.log(\"Error getting quotes from local storage: \\n\" + err);\n  }\n}\nexport function AddQuoteToLocalStorage(quotesName, quote, seedData) {\n  try {\n    var quotes = GetQuotesFromLocalStorage(quotesName, seedData);\n    var newId = GetNextAvailableId(quotes);\n    quote.id = newId;\n    console.log(\"Adding new quote with quoteId: \" + newId);\n    quotes.push(quote);\n    localStorage.setItem(quotesName, JSON.stringify(quotes));\n  } catch (err) {\n    console.log(\"Error adding quote to local storage: \\n\" + err);\n    return;\n  }\n}\nexport function RemoveQuoteFromLocalStorage(quotesName, quoteId) {\n  try {\n    var quotes = GetQuotesFromLocalStorage(quotesName);\n    var itemIndex = quotes.findIndex(x => x.id === quoteId);\n    console.log(\"Removing quoteId: \" + quoteId + \" at index :\" + itemIndex);\n    quotes.splice(itemIndex, 1);\n    localStorage.setItem(quotesName, JSON.stringify(quotes));\n  } catch (err) {\n    console.log(\"Error removing quote from local storage: \\n\" + err);\n    return;\n  }\n}\n\nfunction GetNextAvailableId(quotes) {\n  var ids = quotes.map(q => q.id);\n  ids.sort((a, b) => b - a);\n  var latestId = ids[0];\n  latestId++;\n  console.log(\"nextId: \" + latestId);\n  return latestId;\n}","map":{"version":3,"sources":["/home/cbellee/repos/github/cbellee/parent-child-test/src/helpers/Helpers.js"],"names":["GetQuotesFromLocalStorage","quotesName","seedData","jsonQuotes","localStorage","getItem","setItem","JSON","stringify","console","log","parse","err","AddQuoteToLocalStorage","quote","quotes","newId","GetNextAvailableId","id","push","RemoveQuoteFromLocalStorage","quoteId","itemIndex","findIndex","x","splice","ids","map","q","sort","a","b","latestId"],"mappings":"AAAA,OAAO,SAASA,yBAAT,CAAmCC,UAAnC,EAA+CC,QAA/C,EAAyD;AAC5D,MAAI;AACA,QAAIC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,UAArB,CAAjB;;AACA,QAAIE,UAAU,KAAK,EAAnB,EAAuB;AACnBC,MAAAA,YAAY,CAACE,OAAb,CAAqBL,UAArB,EAAiCM,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAjC;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAP,MAAAA,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,UAArB,CAAb;AACH;;AACD,WAAOM,IAAI,CAACI,KAAL,CAAWR,UAAX,CAAP;AACH,GARD,CAQE,OAAOS,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAgDE,GAA5D;AACH;AACJ;AAED,OAAO,SAASC,sBAAT,CAAgCZ,UAAhC,EAA4Ca,KAA5C,EAAmDZ,QAAnD,EAA6D;AAChE,MAAI;AACA,QAAIa,MAAM,GAAGf,yBAAyB,CAACC,UAAD,EAAaC,QAAb,CAAtC;AACA,QAAIc,KAAK,GAAGC,kBAAkB,CAACF,MAAD,CAA9B;AACAD,IAAAA,KAAK,CAACI,EAAN,GAAWF,KAAX;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCM,KAAhD;AACAD,IAAAA,MAAM,CAACI,IAAP,CAAYL,KAAZ;AACAV,IAAAA,YAAY,CAACE,OAAb,CAAqBL,UAArB,EAAiCM,IAAI,CAACC,SAAL,CAAeO,MAAf,CAAjC;AACH,GAPD,CAOE,OAAOH,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4CE,GAAxD;AACA;AACH;AACJ;AAED,OAAO,SAASQ,2BAAT,CAAqCnB,UAArC,EAAiDoB,OAAjD,EAA0D;AAC7D,MAAI;AACA,QAAIN,MAAM,GAAGf,yBAAyB,CAACC,UAAD,CAAtC;AACA,QAAIqB,SAAS,GAAGP,MAAM,CAACQ,SAAP,CAAiBC,CAAC,IAAIA,CAAC,CAACN,EAAF,KAASG,OAA/B,CAAhB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBW,OAAvB,GAAiC,aAAjC,GAAiDC,SAA7D;AACAP,IAAAA,MAAM,CAACU,MAAP,CAAcH,SAAd,EAAyB,CAAzB;AACAlB,IAAAA,YAAY,CAACE,OAAb,CAAqBL,UAArB,EAAiCM,IAAI,CAACC,SAAL,CAAeO,MAAf,CAAjC;AACH,GAND,CAME,OAAOH,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAgDE,GAA5D;AACA;AACH;AACJ;;AAED,SAASK,kBAAT,CAA4BF,MAA5B,EAAoC;AAChC,MAAIW,GAAG,GAAGX,MAAM,CAACY,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACV,EAAlB,CAAV;AACAQ,EAAAA,GAAG,CAACG,IAAJ,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAGD,CAAvB;AACA,MAAIE,QAAQ,GAAGN,GAAG,CAAC,CAAD,CAAlB;AACAM,EAAAA,QAAQ;AACRvB,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAasB,QAAzB;AACA,SAAOA,QAAP;AACH","sourcesContent":["export function GetQuotesFromLocalStorage(quotesName, seedData) {\n    try {\n        var jsonQuotes = localStorage.getItem(quotesName);\n        if (jsonQuotes === '') {\n            localStorage.setItem(quotesName, JSON.stringify(seedData));\n            console.log(\"setting local storage from 'seedData'\");\n            jsonQuotes = localStorage.getItem(quotesName);\n        }\n        return JSON.parse(jsonQuotes);\n    } catch (err) {\n        console.log(\"Error getting quotes from local storage: \\n\" + err)\n    }\n}\n\nexport function AddQuoteToLocalStorage(quotesName, quote, seedData) {\n    try {\n        var quotes = GetQuotesFromLocalStorage(quotesName, seedData);\n        var newId = GetNextAvailableId(quotes);\n        quote.id = newId;\n        console.log(\"Adding new quote with quoteId: \" + newId);\n        quotes.push(quote);\n        localStorage.setItem(quotesName, JSON.stringify(quotes));\n    } catch (err) {\n        console.log(\"Error adding quote to local storage: \\n\" + err)\n        return;\n    }\n}\n\nexport function RemoveQuoteFromLocalStorage(quotesName, quoteId) {\n    try {\n        var quotes = GetQuotesFromLocalStorage(quotesName);\n        var itemIndex = quotes.findIndex(x => x.id === quoteId);\n        console.log(\"Removing quoteId: \" + quoteId + \" at index :\" + itemIndex);\n        quotes.splice(itemIndex, 1);\n        localStorage.setItem(quotesName, JSON.stringify(quotes));\n    } catch (err) {\n        console.log(\"Error removing quote from local storage: \\n\" + err)\n        return;\n    }\n}\n\nfunction GetNextAvailableId(quotes) {\n    var ids = quotes.map(q => q.id);\n    ids.sort((a, b) => b - a);\n    var latestId = ids[0]\n    latestId++;\n    console.log(\"nextId: \" + latestId);\n    return latestId;\n}\n"]},"metadata":{},"sourceType":"module"}