{"ast":null,"code":"import _toConsumableArray from\"/home/cbellee/repos/github/cbellee/parent-child-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/home/cbellee/repos/github/cbellee/parent-child-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/cbellee/repos/github/cbellee/parent-child-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/cbellee/repos/github/cbellee/parent-child-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext}from'react';import{Redirect}from'react-router-dom';import WindowInputs from'./WindowInputs';import{UpdateQuoteToLocalStorage,GetQuotesFromLocalStorage,GetPostCodeFromSuburb,GetSuburbList}from'../helpers/Helpers';import{Segment,Form,Icon,Input,Button,Grid,Card,GridRow,GridColumn}from\"semantic-ui-react\";import seedData from'../helpers/SeedData';import PostCodeContext from'./PostCodeContext';var dateCreated=new Date().toISOString();var QuoteDetailForm=function QuoteDetailForm(_ref){var match=_ref.match;var quoteId=match.params.quoteId;var quotes=GetQuotesFromLocalStorage('quotes',seedData);var quote=quotes.filter(function(quote){return quote.id==quoteId;})[0];var postCodes=useContext(PostCodeContext)[0];var stateName=\"NSW\";var suburbs=GetSuburbList(postCodes,stateName);var _useState=useState(quote),_useState2=_slicedToArray(_useState,2),quoteState=_useState2[0],setQuoteState=_useState2[1];var _useState3=useState(quote.windows),_useState4=_slicedToArray(_useState3,2),windowState=_useState4[0],setWindowState=_useState4[1];var handleQuoteChange=function handleQuoteChange(e){return setQuoteState(_objectSpread({},quoteState,_defineProperty({},e.target.name,e.target.value)));};var handleSuburbChange=function handleSuburbChange(e){return setQuoteState(_objectSpread({},quoteState,_defineProperty({postCode:GetPostCodeFromSuburb(postCodes,e.target.value)},e.target.name,e.target.value)));};var handleTotalChange=function handleTotalChange(e){var updateWindows=_toConsumableArray(windowState);quoteState.windows=windowState;console.log(\"totalCostQuote: \"+JSON.stringify(quoteState));var totalCost=0;quoteState.windows.map(function(window){totalCost=totalCost+parseInt(window.price);});console.log(\"totalCost: \"+totalCost);quoteState.total=totalCost;setQuoteState(quoteState);};console.log(\"quoteId: \"+quoteId);console.log(\"quote state: \"+JSON.stringify(quoteState.quote));console.log(\"window state: \"+JSON.stringify(windowState));var blankWindow={name:'',width:'2400',height:'1200',panel:'2'};var addWindow=function addWindow(){setWindowState([].concat(_toConsumableArray(windowState),[_objectSpread({},blankWindow)]));};var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),redirectToQuotes=_useState6[0],setRedirectToQuotes=_useState6[1];var handleWindowChange=function handleWindowChange(e){var updatedWindows=_toConsumableArray(windowState);console.log(JSON.stringify(updatedWindows));updatedWindows[e.target.dataset.idx][e.target.className]=e.target.value;setWindowState(updatedWindows);};var handleWindowRemove=function handleWindowRemove(e){var updatedWindows=_toConsumableArray(windowState);console.log(JSON.stringify(updatedWindows));updatedWindows.splice(e.target.dataset.idx,1);setWindowState(updatedWindows);};var onSubmit=function onSubmit(){quoteState.windows=windowState;var totalCost=0;quoteState.windows.map(function(window){totalCost=totalCost+parseInt(window.price);});quoteState.total=totalCost;UpdateQuoteToLocalStorage('quotes',quoteState,seedData);setRedirectToQuotes(true);};return React.createElement(Form,null,redirectToQuotes?React.createElement(Redirect,{to:\"/\"}):null,React.createElement(Segment,null,React.createElement(Grid,{columns:3,padded:\"vertically\"},React.createElement(Grid.Column,null,React.createElement(Form.Field,null,React.createElement(\"label\",null,\"First Name\"),React.createElement(\"input\",{label:\"First Name\",type:\"text\",name:\"firstName\",id:\"firstName\",value:quoteState.firstName,onChange:handleQuoteChange}))),React.createElement(Grid.Column,null,React.createElement(Form.Field,null,React.createElement(\"label\",null,\"Last Name\"),React.createElement(\"input\",{label:\"Last Name\",type:\"text\",name:\"lastName\",id:\"lastName\",value:quoteState.lastName,onChange:handleQuoteChange}))),React.createElement(Grid.Column,null,React.createElement(Form.Field,null,React.createElement(\"label\",null,\"Email\"),React.createElement(\"input\",{label:\"Email\",type:\"text\",name:\"email\",id:\"email\",value:quoteState.email,onChange:handleQuoteChange}))),React.createElement(Grid.Column,null,React.createElement(Form.Field,null,React.createElement(\"label\",null,\"Phone\"),React.createElement(\"input\",{label:\"Phone\",type:\"text\",name:\"phone\",id:\"phone\",value:quoteState.phone,onChange:handleQuoteChange}))),React.createElement(Grid.Column,null,React.createElement(Form.Field,null,React.createElement(\"label\",null,\"Street\"),React.createElement(\"input\",{label:\"Street\",type:\"text\",name:\"street\",id:\"street\",value:quoteState.street,onChange:handleQuoteChange}))),React.createElement(Grid.Column,null,React.createElement(Form.Field,null,React.createElement(\"label\",null,\"Suburb\"),React.createElement(\"select\",{label:\"Suburb\",name:\"suburb\",id:\"suburb\",value:quoteState.suburb,onChange:handleSuburbChange},suburbs.map(function(suburb){return React.createElement(\"option\",{key:suburb.text,value:suburb.value},suburb.value);})))),React.createElement(Grid.Column,null,React.createElement(Form.Field,null,React.createElement(\"label\",null,\"PostCode\"),React.createElement(\"input\",{label:\"Postcode\",type:\"text\",name:\"postCode\",id:\"postCode\",value:quoteState.postCode,onChange:handleQuoteChange}))),React.createElement(Grid.Column,null,React.createElement(Form.Field,null,React.createElement(\"label\",null,\"Total\"),React.createElement(\"input\",{label:\"Total\",type:\"text\",name:\"total\",id:\"total\",value:quoteState.total,onChange:handleTotalChange}))))),React.createElement(Grid,null,React.createElement(Form.Field,null,React.createElement(Button,{floated:\"left\",icon:true,labelPosition:\"left\",color:\"blue\",size:\"small\",onClick:addWindow},React.createElement(Icon,{name:\"edit\"}),\" Add Window\")),React.createElement(Form.Field,null,React.createElement(Button,{floated:\"left\",icon:true,labelPosition:\"left\",color:\"green\",size:\"small\",onClick:onSubmit},React.createElement(Icon,{name:\"edit\"}),\" Save Quote\"))),React.createElement(Grid,{columns:1},React.createElement(Grid.Column,null,windowState.map(function(val,idx){return React.createElement(WindowInputs,{key:\"window-\".concat(idx),idx:idx,windowState:windowState,handleWindowChange:handleWindowChange,handleWindowRemove:handleWindowRemove});}))));};export default QuoteDetailForm;","map":{"version":3,"sources":["/home/cbellee/repos/github/cbellee/parent-child-test/src/components/QuoteDetailForm.js"],"names":["React","useState","useContext","Redirect","WindowInputs","UpdateQuoteToLocalStorage","GetQuotesFromLocalStorage","GetPostCodeFromSuburb","GetSuburbList","Segment","Form","Icon","Input","Button","Grid","Card","GridRow","GridColumn","seedData","PostCodeContext","dateCreated","Date","toISOString","QuoteDetailForm","match","quoteId","params","quotes","quote","filter","id","postCodes","stateName","suburbs","quoteState","setQuoteState","windows","windowState","setWindowState","handleQuoteChange","e","target","name","value","handleSuburbChange","postCode","handleTotalChange","updateWindows","console","log","JSON","stringify","totalCost","map","window","parseInt","price","total","blankWindow","width","height","panel","addWindow","redirectToQuotes","setRedirectToQuotes","handleWindowChange","updatedWindows","dataset","idx","className","handleWindowRemove","splice","onSubmit","firstName","lastName","email","phone","street","suburb","text","val"],"mappings":"qrBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,OAA5C,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAASC,yBAAT,CAAoCC,yBAApC,CAA+DC,qBAA/D,CAAsFC,aAAtF,KAA2G,oBAA3G,CACA,OAASC,OAAT,CAAkBC,IAAlB,CAAwBC,IAAxB,CAA8BC,KAA9B,CAAqCC,MAArC,CAA6CC,IAA7C,CAAmDC,IAAnD,CAAyDC,OAAzD,CAAkEC,UAAlE,KAAoF,mBAApF,CACA,MAAOC,CAAAA,QAAP,KAAqB,qBAArB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CAEA,GAAMC,CAAAA,WAAW,CAAG,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAApB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,IAErBC,CAAAA,OAFqB,CAG/BD,KAH+B,CAE/BE,MAF+B,CAErBD,OAFqB,CAKnC,GAAIE,CAAAA,MAAM,CAAGrB,yBAAyB,CAAC,QAAD,CAAWY,QAAX,CAAtC,CACA,GAAIU,CAAAA,KAAK,CAAGD,MAAM,CAACE,MAAP,CAAc,SAACD,KAAD,QAAWA,CAAAA,KAAK,CAACE,EAAN,EAAYL,OAAvB,EAAd,EAA8C,CAA9C,CAAZ,CAEA,GAAMM,CAAAA,SAAS,CAAG7B,UAAU,CAACiB,eAAD,CAAV,CAA4B,CAA5B,CAAlB,CACA,GAAIa,CAAAA,SAAS,CAAG,KAAhB,CACA,GAAIC,CAAAA,OAAO,CAAGzB,aAAa,CAACuB,SAAD,CAAYC,SAAZ,CAA3B,CAVmC,cAYC/B,QAAQ,CACxC2B,KADwC,CAZT,wCAY5BM,UAZ4B,eAYhBC,aAZgB,8BAgBGlC,QAAQ,CAC1C2B,KAAK,CAACQ,OADoC,CAhBX,yCAgB5BC,WAhB4B,eAgBfC,cAhBe,eAoBnC,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,CAAD,QAAOL,CAAAA,aAAa,kBACvCD,UADuC,oBAEzCM,CAAC,CAACC,MAAF,CAASC,IAFgC,CAEzBF,CAAC,CAACC,MAAF,CAASE,KAFgB,GAApB,EAA1B,CAKA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACJ,CAAD,QAAOL,CAAAA,aAAa,kBACxCD,UADwC,kBAE3CW,QAAQ,CAAEtC,qBAAqB,CAACwB,SAAD,CAAYS,CAAC,CAACC,MAAF,CAASE,KAArB,CAFY,EAG1CH,CAAC,CAACC,MAAF,CAASC,IAHiC,CAG1BF,CAAC,CAACC,MAAF,CAASE,KAHiB,GAApB,EAA3B,CAMA,GAAMG,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACN,CAAD,CAAO,CAC7B,GAAMO,CAAAA,aAAa,oBAAOV,WAAP,CAAnB,CACAH,UAAU,CAACE,OAAX,CAAqBC,WAArB,CACAW,OAAO,CAACC,GAAR,CAAY,mBAAqBC,IAAI,CAACC,SAAL,CAAejB,UAAf,CAAjC,EACA,GAAIkB,CAAAA,SAAS,CAAG,CAAhB,CACAlB,UAAU,CAACE,OAAX,CAAmBiB,GAAnB,CAAuB,SAACC,MAAD,CAAY,CAC/BF,SAAS,CAAGA,SAAS,CAAGG,QAAQ,CAACD,MAAM,CAACE,KAAR,CAAhC,CACH,CAFD,EAGAR,OAAO,CAACC,GAAR,CAAY,cAAgBG,SAA5B,EACAlB,UAAU,CAACuB,KAAX,CAAmBL,SAAnB,CACAjB,aAAa,CAACD,UAAD,CAAb,CACH,CAXD,CAaAc,OAAO,CAACC,GAAR,CAAY,YAAcxB,OAA1B,EACAuB,OAAO,CAACC,GAAR,CAAY,gBAAkBC,IAAI,CAACC,SAAL,CAAejB,UAAU,CAACN,KAA1B,CAA9B,EACAoB,OAAO,CAACC,GAAR,CAAY,iBAAmBC,IAAI,CAACC,SAAL,CAAed,WAAf,CAA/B,EAEA,GAAMqB,CAAAA,WAAW,CAAG,CAAEhB,IAAI,CAAE,EAAR,CAAYiB,KAAK,CAAE,MAAnB,CAA2BC,MAAM,CAAE,MAAnC,CAA2CC,KAAK,CAAE,GAAlD,CAApB,CACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACpBxB,cAAc,8BAAKD,WAAL,oBAAuBqB,WAAvB,IAAd,CACH,CAFD,CAjDmC,eAqDazD,QAAQ,CAAC,KAAD,CArDrB,yCAqD5B8D,gBArD4B,eAqDVC,mBArDU,eAuDnC,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACzB,CAAD,CAAO,CAC9B,GAAM0B,CAAAA,cAAc,oBAAO7B,WAAP,CAApB,CACAW,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAee,cAAf,CAAZ,EACAA,cAAc,CAAC1B,CAAC,CAACC,MAAF,CAAS0B,OAAT,CAAiBC,GAAlB,CAAd,CAAqC5B,CAAC,CAACC,MAAF,CAAS4B,SAA9C,EAA2D7B,CAAC,CAACC,MAAF,CAASE,KAApE,CACAL,cAAc,CAAC4B,cAAD,CAAd,CACH,CALD,CAOA,GAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAC9B,CAAD,CAAO,CAC9B,GAAM0B,CAAAA,cAAc,oBAAO7B,WAAP,CAApB,CACAW,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAee,cAAf,CAAZ,EACAA,cAAc,CAACK,MAAf,CAAsB/B,CAAC,CAACC,MAAF,CAAS0B,OAAT,CAAiBC,GAAvC,CAA4C,CAA5C,EACA9B,cAAc,CAAC4B,cAAD,CAAd,CACH,CALD,CAOA,GAAMM,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnBtC,UAAU,CAACE,OAAX,CAAqBC,WAArB,CACA,GAAIe,CAAAA,SAAS,CAAG,CAAhB,CACAlB,UAAU,CAACE,OAAX,CAAmBiB,GAAnB,CAAuB,SAACC,MAAD,CAAY,CAC/BF,SAAS,CAAGA,SAAS,CAAGG,QAAQ,CAACD,MAAM,CAACE,KAAR,CAAhC,CACH,CAFD,EAGAtB,UAAU,CAACuB,KAAX,CAAmBL,SAAnB,CACA/C,yBAAyB,CAAC,QAAD,CAAW6B,UAAX,CAAuBhB,QAAvB,CAAzB,CACA8C,mBAAmB,CAAC,IAAD,CAAnB,CACH,CATD,CAWA,MAEI,qBAAC,IAAD,MACKD,gBAAgB,CAAG,oBAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EAAH,CAAyB,IAD9C,CAEI,oBAAC,OAAD,MACI,oBAAC,IAAD,EAAM,OAAO,CAAE,CAAf,CAAkB,MAAM,CAAC,YAAzB,EACI,oBAAC,IAAD,CAAM,MAAN,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,8CADJ,CAEI,6BACI,KAAK,CAAC,YADV,CAEI,IAAI,CAAC,MAFT,CAGI,IAAI,CAAC,WAHT,CAII,EAAE,CAAC,WAJP,CAKI,KAAK,CAAE7B,UAAU,CAACuC,SALtB,CAMI,QAAQ,CAAElC,iBANd,EAFJ,CADJ,CADJ,CAcI,oBAAC,IAAD,CAAM,MAAN,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,6CADJ,CAEI,6BACI,KAAK,CAAC,WADV,CAEI,IAAI,CAAC,MAFT,CAGI,IAAI,CAAC,UAHT,CAII,EAAE,CAAC,UAJP,CAKI,KAAK,CAAEL,UAAU,CAACwC,QALtB,CAMI,QAAQ,CAAEnC,iBANd,EAFJ,CADJ,CAdJ,CA2BI,oBAAC,IAAD,CAAM,MAAN,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,yCADJ,CAEI,6BACI,KAAK,CAAC,OADV,CAEI,IAAI,CAAC,MAFT,CAGI,IAAI,CAAC,OAHT,CAII,EAAE,CAAC,OAJP,CAKI,KAAK,CAAEL,UAAU,CAACyC,KALtB,CAMI,QAAQ,CAAEpC,iBANd,EAFJ,CADJ,CA3BJ,CAwCI,oBAAC,IAAD,CAAM,MAAN,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,yCADJ,CAEI,6BACI,KAAK,CAAC,OADV,CAEI,IAAI,CAAC,MAFT,CAGI,IAAI,CAAC,OAHT,CAII,EAAE,CAAC,OAJP,CAKI,KAAK,CAAEL,UAAU,CAAC0C,KALtB,CAMI,QAAQ,CAAErC,iBANd,EAFJ,CADJ,CAxCJ,CAqDI,oBAAC,IAAD,CAAM,MAAN,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,0CADJ,CAEI,6BACI,KAAK,CAAC,QADV,CAEI,IAAI,CAAC,MAFT,CAGI,IAAI,CAAC,QAHT,CAII,EAAE,CAAC,QAJP,CAKI,KAAK,CAAEL,UAAU,CAAC2C,MALtB,CAMI,QAAQ,CAAEtC,iBANd,EAFJ,CADJ,CArDJ,CAkEI,oBAAC,IAAD,CAAM,MAAN,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,0CADJ,CAEI,8BACI,KAAK,CAAC,QADV,CAEI,IAAI,CAAC,QAFT,CAGI,EAAE,CAAC,QAHP,CAII,KAAK,CAAEL,UAAU,CAAC4C,MAJtB,CAKI,QAAQ,CAAElC,kBALd,EAMKX,OAAO,CAACoB,GAAR,CAAY,SAACyB,MAAD,QAAY,+BAAQ,GAAG,CAAEA,MAAM,CAACC,IAApB,CAA0B,KAAK,CAAED,MAAM,CAACnC,KAAxC,EAAgDmC,MAAM,CAACnC,KAAvD,CAAZ,EAAZ,CANL,CAFJ,CADJ,CAlEJ,CA+EI,oBAAC,IAAD,CAAM,MAAN,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,4CADJ,CAEI,6BACI,KAAK,CAAC,UADV,CAEI,IAAI,CAAC,MAFT,CAGI,IAAI,CAAC,UAHT,CAII,EAAE,CAAC,UAJP,CAKI,KAAK,CAAET,UAAU,CAACW,QALtB,CAMI,QAAQ,CAAEN,iBANd,EAFJ,CADJ,CA/EJ,CA4FI,oBAAC,IAAD,CAAM,MAAN,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,yCADJ,CAEI,6BACI,KAAK,CAAC,OADV,CAEI,IAAI,CAAC,MAFT,CAGI,IAAI,CAAC,OAHT,CAII,EAAE,CAAC,OAJP,CAKI,KAAK,CAAEL,UAAU,CAACuB,KALtB,CAMI,QAAQ,CAAEX,iBANd,EAFJ,CADJ,CA5FJ,CADJ,CAFJ,CA8GI,oBAAC,IAAD,MACI,oBAAC,IAAD,CAAM,KAAN,MACI,oBAAC,MAAD,EACI,OAAO,CAAC,MADZ,CAEI,IAAI,KAFR,CAGI,aAAa,CAAC,MAHlB,CAII,KAAK,CAAC,MAJV,CAKI,IAAI,CAAC,OALT,CAMI,OAAO,CAAEgB,SANb,EAOI,oBAAC,IAAD,EAAM,IAAI,CAAC,MAAX,EAPJ,eADJ,CADJ,CAYI,oBAAC,IAAD,CAAM,KAAN,MACI,oBAAC,MAAD,EACI,OAAO,CAAC,MADZ,CAEI,IAAI,KAFR,CAGI,aAAa,CAAC,MAHlB,CAII,KAAK,CAAC,OAJV,CAKI,IAAI,CAAC,OALT,CAMI,OAAO,CAAEU,QANb,EAOI,oBAAC,IAAD,EAAM,IAAI,CAAC,MAAX,EAPJ,eADJ,CAZJ,CA9GJ,CAsII,oBAAC,IAAD,EAAM,OAAO,CAAE,CAAf,EACI,oBAAC,IAAD,CAAM,MAAN,MAEQnC,WAAW,CAACgB,GAAZ,CAAgB,SAAC2B,GAAD,CAAMZ,GAAN,QACZ,qBAAC,YAAD,EACI,GAAG,kBAAYA,GAAZ,CADP,CAEI,GAAG,CAAEA,GAFT,CAGI,WAAW,CAAE/B,WAHjB,CAII,kBAAkB,CAAE4B,kBAJxB,CAKI,kBAAkB,CAAEK,kBALxB,EADY,EAAhB,CAFR,CADJ,CAtIJ,CAFJ,CAyJH,CAzOD,CA2OA,cAAe/C,CAAAA,eAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport WindowInputs from './WindowInputs';\nimport { UpdateQuoteToLocalStorage, GetQuotesFromLocalStorage, GetPostCodeFromSuburb, GetSuburbList } from '../helpers/Helpers';\nimport { Segment, Form, Icon, Input, Button, Grid, Card, GridRow, GridColumn } from \"semantic-ui-react\";\nimport seedData from '../helpers/SeedData';\nimport PostCodeContext from './PostCodeContext';\n\nconst dateCreated = new Date().toISOString();\n\nconst QuoteDetailForm = ({ match }) => {\n    const {\n        params: { quoteId },\n    } = match;\n\n    let quotes = GetQuotesFromLocalStorage('quotes', seedData);\n    let quote = quotes.filter((quote) => quote.id == quoteId)[0];\n\n    const postCodes = useContext(PostCodeContext)[0];\n    var stateName = \"NSW\"\n    var suburbs = GetSuburbList(postCodes, stateName);\n\n    const [quoteState, setQuoteState] = useState(\n        quote,\n    );\n\n    const [windowState, setWindowState] = useState(\n        quote.windows,\n    );\n\n    const handleQuoteChange = (e) => setQuoteState({\n        ...quoteState,\n        [e.target.name]: e.target.value,\n    });\n\n    const handleSuburbChange = (e) => setQuoteState({\n        ...quoteState,\n        postCode: GetPostCodeFromSuburb(postCodes, e.target.value),\n        [e.target.name]: e.target.value,\n    });\n\n    const handleTotalChange = (e) => {\n        const updateWindows = [...windowState];\n        quoteState.windows = windowState;\n        console.log(\"totalCostQuote: \" + JSON.stringify(quoteState));\n        var totalCost = 0;\n        quoteState.windows.map((window) => {\n            totalCost = totalCost + parseInt(window.price);\n        });\n        console.log(\"totalCost: \" + totalCost);\n        quoteState.total = totalCost;\n        setQuoteState(quoteState);\n    }\n\n    console.log(\"quoteId: \" + quoteId);\n    console.log(\"quote state: \" + JSON.stringify(quoteState.quote));\n    console.log(\"window state: \" + JSON.stringify(windowState));\n\n    const blankWindow = { name: '', width: '2400', height: '1200', panel: '2' };\n    const addWindow = () => {\n        setWindowState([...windowState, { ...blankWindow }]);\n    };\n\n    const [redirectToQuotes, setRedirectToQuotes] = useState(false);\n\n    const handleWindowChange = (e) => {\n        const updatedWindows = [...windowState];\n        console.log(JSON.stringify(updatedWindows));\n        updatedWindows[e.target.dataset.idx][e.target.className] = e.target.value;\n        setWindowState(updatedWindows);\n    };\n\n    const handleWindowRemove = (e) => {\n        const updatedWindows = [...windowState];\n        console.log(JSON.stringify(updatedWindows));\n        updatedWindows.splice(e.target.dataset.idx, 1);\n        setWindowState(updatedWindows);\n    }\n\n    const onSubmit = () => {\n        quoteState.windows = windowState;\n        var totalCost = 0;\n        quoteState.windows.map((window) => {\n            totalCost = totalCost + parseInt(window.price);\n        });\n        quoteState.total = totalCost;\n        UpdateQuoteToLocalStorage('quotes', quoteState, seedData);\n        setRedirectToQuotes(true);\n    }\n\n    return (\n        \n        <Form>\n            {redirectToQuotes ? <Redirect to=\"/\" /> : null}\n            <Segment>\n                <Grid columns={3} padded=\"vertically\">\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>First Name</label>\n                            <input\n                                label=\"First Name\"\n                                type=\"text\"\n                                name=\"firstName\"\n                                id=\"firstName\"\n                                value={quoteState.firstName}\n                                onChange={handleQuoteChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Last Name</label>\n                            <input\n                                label=\"Last Name\"\n                                type=\"text\"\n                                name=\"lastName\"\n                                id=\"lastName\"\n                                value={quoteState.lastName}\n                                onChange={handleQuoteChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Email</label>\n                            <input\n                                label=\"Email\"\n                                type=\"text\"\n                                name=\"email\"\n                                id=\"email\"\n                                value={quoteState.email}\n                                onChange={handleQuoteChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Phone</label>\n                            <input\n                                label=\"Phone\"\n                                type=\"text\"\n                                name=\"phone\"\n                                id=\"phone\"\n                                value={quoteState.phone}\n                                onChange={handleQuoteChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Street</label>\n                            <input\n                                label=\"Street\"\n                                type=\"text\"\n                                name=\"street\"\n                                id=\"street\"\n                                value={quoteState.street}\n                                onChange={handleQuoteChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Suburb</label>\n                            <select\n                                label=\"Suburb\"\n                                name=\"suburb\"\n                                id=\"suburb\"\n                                value={quoteState.suburb}\n                                onChange={handleSuburbChange}>\n                                {suburbs.map((suburb) => <option key={suburb.text} value={suburb.value}>{suburb.value}</option>)}\n                            </select>\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>PostCode</label>\n                            <input\n                                label=\"Postcode\"\n                                type=\"text\"\n                                name=\"postCode\"\n                                id=\"postCode\"\n                                value={quoteState.postCode}\n                                onChange={handleQuoteChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Form.Field>\n                            <label>Total</label>\n                            <input\n                                label=\"Total\"\n                                type=\"text\"\n                                name=\"total\"\n                                id=\"total\"\n                                value={quoteState.total}\n                                onChange={handleTotalChange}\n                            />\n                        </Form.Field>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Grid>\n                <Form.Field>\n                    <Button\n                        floated=\"left\"\n                        icon\n                        labelPosition=\"left\"\n                        color=\"blue\"\n                        size=\"small\"\n                        onClick={addWindow}>\n                        <Icon name=\"edit\" /> Add Window\n                        </Button>\n                </Form.Field>\n                <Form.Field>\n                    <Button\n                        floated=\"left\"\n                        icon\n                        labelPosition=\"left\"\n                        color=\"green\"\n                        size=\"small\"\n                        onClick={onSubmit}>\n                        <Icon name=\"edit\" /> Save Quote\n                        </Button>\n                </Form.Field>\n            </Grid>\n            <Grid columns={1}>\n                <Grid.Column>\n                    {\n                        windowState.map((val, idx) => (\n                            <WindowInputs\n                                key={`window-${idx}`}\n                                idx={idx}\n                                windowState={windowState}\n                                handleWindowChange={handleWindowChange}\n                                handleWindowRemove={handleWindowRemove}\n                            />\n                        ))\n                    }\n                </Grid.Column>\n            </Grid>\n        </Form >\n    );\n};\n\nexport default QuoteDetailForm;"]},"metadata":{},"sourceType":"module"}