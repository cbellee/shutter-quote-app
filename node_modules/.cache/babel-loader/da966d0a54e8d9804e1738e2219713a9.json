{"ast":null,"code":"module.exports = function (React, form, common) {\n  function getDefaultValue(self, props) {\n    return props.defaultValue || self.getModelValue();\n  }\n\n  React.mixins.add('modelValueAccessor', {\n    getModelValue: function () {\n      return this.state && this.state.value || this.props.value;\n    },\n    setModelValue: function (value) {\n      this.setState({\n        value: value\n      });\n    }\n  });\n  var exports = {\n    mixins: {\n      all: ['modelValueAccessor']\n    },\n    optionsRetriever: function (defaultValue) {\n      var rtn = (this.props.options || []).map(function (item) {\n        var label, value, selected;\n\n        if (typeof item === 'string') {\n          selected = defaultValue === item;\n          value = item;\n          label = item;\n        } else {\n          selected = defaultValue === item.value;\n          value = item.value;\n          label = item.label;\n        }\n\n        return {\n          value: value,\n          label: label,\n          selected: selected\n        };\n      });\n\n      if (this.props.placeholder) {\n        rtn.splice(0, 0, {\n          value: '',\n          label: this.props.placeholder\n        });\n      }\n\n      return rtn;\n    }\n  };\n  var classData = {\n    /*** Text\n     * Standard text field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***type***: the input type (\"text\" by default)\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <Text label=\"Foo\" defaultValue=\"bar\"> ... </Text>\n     ***/\n    Text: {\n      renderInput: function (props) {\n        props.type = props.type || 'text';\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.input(props);\n      }\n    },\n\n    /*** TextArea\n     * Standard textarea field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <TextArea label=\"Foo\" defaultValue=\"bar\"> ... </TextArea>\n     ***/\n    TextArea: {\n      renderInput: function (props) {\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.textarea(props);\n      }\n    },\n\n    /*** Select\n     * Standard select field that can display a label and optional field wrapper.\n     * A [fancier control](./Dropdown.md) can be used as well.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Select***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *      var Select = rsui.input.Select;\n     *      <Select label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Select: {\n      defaultContainerClass: function () {\n        return common.mergeClassNames('ui dropdown', this.props.type);\n      },\n      renderInput: function (props) {\n        var defaultValue = getDefaultValue(this, props);\n        options = exports.optionsRetriever.call(this, defaultValue).map(function (option) {\n          return React.DOM.option({\n            value: option.value\n          }, option.label);\n        });\n        props.defaultValue = defaultValue;\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.select(props, options);\n      }\n    },\n\n    /*** Checkbox\n     * Standard checkbox field that can display a label and optional field wrapper.\n     *\n     * Properties\n     * ----------\n     * - ***defaultChecked*** true if the field should be checked in it's initial state\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Checkbox***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Checkbox = rsui.input.Checkbox;\n     *     <Checkbox label=\"Foo\" defaultChecked={true} defaultValue=\"abc\"/>\n     ***/\n    Checkbox: {\n      defaultLabelAfter: true,\n      defaultInlineLabel: true,\n      defaultContainerClass: function () {\n        return common.mergeClassNames('ui checkbox', this.props.type, this._className);\n      },\n      renderInput: function (props) {\n        var checked = getDefaultValue(this, props);\n\n        if (checked === undefined) {\n          checked = this.props.defaultChecked;\n        }\n\n        props.defaultChecked = checked;\n        props.value = this.props.value || 'true';\n        props.type = 'checkbox';\n        props.className = common.mergeClassNames(props.className);\n        return React.DOM.input(props);\n      },\n      getDOMValue: function (el) {\n        return !!el.checked;\n      }\n    },\n\n    /*** RadioGroup\n     * Collection of radio items field that can display a label and optional field wrapper.  The item\n     * data is retrieved in the same way that the [Dropdown](./Dropdown.md) component does.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.RadioGroup***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    RadioGroup: {\n      defaultContainerClass: function () {\n        return 'grouped fields inline';\n      },\n      renderInput: function (props) {\n        var self = this,\n            state = this.state,\n            value = getDefaultValue(this, props),\n            options = exports.optionsRetriever.call(this, value).map(function (option) {\n          var id = common.uniqueId(),\n              className = common.mergeClassNames('ui radio checkbox', props.className, this._className);\n          return React.DOM.div({\n            className: 'field'\n          }, React.DOM.div({\n            className: className\n          }, React.DOM.input({\n            id: id,\n            type: 'radio',\n            name: props.name,\n            value: option.value,\n            defaultChecked: option.selected,\n            onChange: common.eventBinder(option.value, 'onChange', self)\n          }), React.DOM.label({\n            htmlFor: id\n          }, option.label)));\n        });\n        return options;\n      }\n    },\n\n    /*** Dropdown\n     * Similar to the [Select](./Select.md) component but fancier.  See [examples](http://semantic-ui.com/modules/dropdown.html#/examples)\n     * for more details on the actual semantic-ui component.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Dropdown***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Dropdown: {\n      render: function () {\n        var props = this.props,\n            value = getDefaultValue(this, props);\n        var options = exports.optionsRetriever.call(this, value).map(function (option) {\n          return React.DOM.div({\n            className: common.mergeClassNames('item', option.selected ? 'active' : undefined),\n            'data-value': option.value\n          }, option.label);\n        });\n        var inputProps = common.omit(props, ['label', 'className', 'options', 'value', 'icon', 'onChange', 'onShow', 'onHide']);\n        inputProps.type = 'hidden';\n        inputProps.defaultValue = value;\n        return React.DOM.div({\n          className: common.mergeClassNames('ui dropdown ' + (props.type || 'floating'), props.className, this._className)\n        }, React.DOM.input(inputProps), React.DOM.div({\n          className: 'text'\n        }, props.label), React.DOM.i({\n          className: (props.icon || 'dropdown') + ' icon'\n        }), React.DOM.div({\n          className: 'menu'\n        }, options));\n      },\n      componentDidMount: function () {\n        $(this.getDOMNode()).dropdown({\n          onChange: this.props.onChange,\n          onShow: this.props.onShow,\n          onHide: this.props.onHide\n        });\n      },\n      getDOMValue: function (el) {\n        return $(this.getDOMNode()).dropdown('get value');\n      }\n    }\n  };\n  common.init(exports, classData, {\n    defaults: {\n      render: form.fieldRenderer,\n      getDOMValue: function (el) {\n        return $(el).val();\n      }\n    },\n    ifReactBackbone: function (options) {\n      exports.defaultModelSetOptions = {\n        validate: true,\n        allowEmpty: true\n      };\n      /**\n       * This mixin listenets for onChange events and set the associated model with that value.  If the\n       * model change succeeds, the \"error\" state attribute will be removed.\n       */\n\n      React.mixins.add('modelChangeSetter', {\n        modifyInputFieldProps: function (props) {\n          var onChange = props.onChange,\n              model = this.getModel(),\n              key = props.key;\n\n          if (props.set === undefined || props.set === true) {\n            props.set = exports.defaultModelSetOptions;\n\n            if (props.set) {\n              var self = this;\n\n              props.onChange = function (event) {\n                var model = self.getModel();\n\n                if (model) {\n                  var value = self.getDOMValue(event.currentTarget);\n\n                  if (self.setModelValue(value, props.set) !== false) {\n                    // we did not encounter a validation error\n                    if (self.state && self.state.error) {\n                      self.setState({\n                        error: false\n                      });\n                    }\n                  }\n\n                  if (onChange) {\n                    onChange.call(self, event);\n                  }\n                }\n              };\n            }\n          }\n\n          return props;\n        }\n      }, 'modelValueAccessor', 'modelEventBinder');\n      options.mixins = {\n        all: ['modelChangeSetter', 'modelFieldValidator']\n      };\n    }\n  });\n  return exports;\n};","map":{"version":3,"sources":["/home/cbellee/repos/github/cbellee/parent-child-test/node_modules/react-semantic-ui/lib/input.js"],"names":["module","exports","React","form","common","getDefaultValue","self","props","defaultValue","getModelValue","mixins","add","state","value","setModelValue","setState","all","optionsRetriever","rtn","options","map","item","label","selected","placeholder","splice","classData","Text","renderInput","type","className","mergeClassNames","_className","DOM","input","TextArea","textarea","Select","defaultContainerClass","call","option","select","Checkbox","defaultLabelAfter","defaultInlineLabel","checked","undefined","defaultChecked","getDOMValue","el","RadioGroup","id","uniqueId","div","name","onChange","eventBinder","htmlFor","Dropdown","render","inputProps","omit","i","icon","componentDidMount","$","getDOMNode","dropdown","onShow","onHide","init","defaults","fieldRenderer","val","ifReactBackbone","defaultModelSetOptions","validate","allowEmpty","modifyInputFieldProps","model","getModel","key","set","event","currentTarget","error"],"mappings":"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","sourcesContent":["module.exports = function(React, form, common) {\n\n  function getDefaultValue(self, props) {\n    return props.defaultValue || self.getModelValue();\n  }\n\n  React.mixins.add('modelValueAccessor', {\n    getModelValue: function() {\n      return this.state && this.state.value || this.props.value;\n    },\n    setModelValue: function(value) {\n      this.setState({value: value});\n    }\n  });\n\n  var exports = {\n    mixins: {all: ['modelValueAccessor']},\n\n    optionsRetriever: function(defaultValue) {\n      var rtn = (this.props.options || []).map(function(item) {\n        var label, value, selected;\n        if (typeof item === 'string') {\n          selected = defaultValue === item;\n          value = item;\n          label = item;\n        } else {\n          selected = defaultValue === item.value;\n          value = item.value;\n          label = item.label;\n        }\n        return {value: value, label: label, selected: selected};\n      });\n      if (this.props.placeholder) {\n        rtn.splice(0, 0, {value: '', label: this.props.placeholder});\n      }\n      return rtn;\n    }\n  };\n\n  var classData = {\n\n    /*** Text\n     * Standard text field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***type***: the input type (\"text\" by default)\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <Text label=\"Foo\" defaultValue=\"bar\"> ... </Text>\n     ***/\n    Text: {\n      renderInput: function(props) {\n        props.type = props.type || 'text';\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.input(props);\n      }\n    },\n\n    /*** TextArea\n     * Standard textarea field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <TextArea label=\"Foo\" defaultValue=\"bar\"> ... </TextArea>\n     ***/\n    TextArea: {\n      renderInput: function(props) {\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.textarea(props);\n      }\n    },\n\n    /*** Select\n     * Standard select field that can display a label and optional field wrapper.\n     * A [fancier control](./Dropdown.md) can be used as well.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Select***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *      var Select = rsui.input.Select;\n     *      <Select label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Select: {\n      defaultContainerClass: function() {\n        return common.mergeClassNames('ui dropdown', this.props.type);\n      },\n      renderInput: function(props) {\n        var defaultValue = getDefaultValue(this, props);\n            options = exports.optionsRetriever.call(this, defaultValue).map(function(option) {\n          return React.DOM.option({value: option.value}, option.label);\n        });\n        props.defaultValue = defaultValue;\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.select(props, options);\n      }\n    },\n\n    /*** Checkbox\n     * Standard checkbox field that can display a label and optional field wrapper.\n     *\n     * Properties\n     * ----------\n     * - ***defaultChecked*** true if the field should be checked in it's initial state\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Checkbox***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Checkbox = rsui.input.Checkbox;\n     *     <Checkbox label=\"Foo\" defaultChecked={true} defaultValue=\"abc\"/>\n     ***/\n    Checkbox: {\n      defaultLabelAfter: true,\n      defaultInlineLabel: true,\n      defaultContainerClass: function() {\n        return common.mergeClassNames('ui checkbox', this.props.type, this._className);\n      },\n      renderInput: function(props) {\n        var checked = getDefaultValue(this, props);\n        if (checked === undefined) {\n          checked = this.props.defaultChecked;\n        }\n        props.defaultChecked = checked;\n        props.value = this.props.value || 'true';\n        props.type = 'checkbox';\n        props.className = common.mergeClassNames(props.className);\n        return React.DOM.input(props);\n      },\n      getDOMValue: function(el) {\n        return !!el.checked;\n      }\n    },\n\n    /*** RadioGroup\n     * Collection of radio items field that can display a label and optional field wrapper.  The item\n     * data is retrieved in the same way that the [Dropdown](./Dropdown.md) component does.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.RadioGroup***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    RadioGroup: {\n      defaultContainerClass: function() {\n        return 'grouped fields inline';\n      },\n      renderInput: function(props) {\n        var self = this,\n            state = this.state,\n            value = getDefaultValue(this, props),\n            options = exports.optionsRetriever.call(this, value).map(function(option) {\n              var id = common.uniqueId(),\n                  className = common.mergeClassNames('ui radio checkbox', props.className, this._className);\n              return React.DOM.div({className: 'field'}, React.DOM.div({className: className},\n                React.DOM.input({id: id, type: 'radio', name: props.name, value: option.value,\n                    defaultChecked: option.selected, onChange: common.eventBinder(option.value, 'onChange', self)}),\n                React.DOM.label({htmlFor: id}, option.label)\n              ));\n            });\n        return options;\n      }\n    },\n\n    /*** Dropdown\n     * Similar to the [Select](./Select.md) component but fancier.  See [examples](http://semantic-ui.com/modules/dropdown.html#/examples)\n     * for more details on the actual semantic-ui component.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Dropdown***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Dropdown: {\n      render: function() {\n        var props = this.props,\n            value = getDefaultValue(this, props);\n        var options = exports.optionsRetriever.call(this, value).map(function(option) {\n          return React.DOM.div({className: common.mergeClassNames('item', option.selected ? 'active' : undefined), 'data-value': option.value}, option.label);\n        });\n        var inputProps = common.omit(props, ['label', 'className', 'options', 'value', 'icon', 'onChange', 'onShow', 'onHide']);\n        inputProps.type = 'hidden';\n        inputProps.defaultValue = value;\n        return React.DOM.div({className: common.mergeClassNames('ui dropdown ' + (props.type || 'floating'), props.className, this._className)},\n          React.DOM.input(inputProps),\n          React.DOM.div({className: 'text'}, props.label),\n          React.DOM.i({className: (props.icon || 'dropdown') + ' icon'}),\n          React.DOM.div({className: 'menu'}, options)\n        );\n      },\n      componentDidMount: function() {\n        $(this.getDOMNode()).dropdown({\n          onChange: this.props.onChange,\n          onShow: this.props.onShow,\n          onHide: this.props.onHide\n        });\n      },\n      getDOMValue: function(el) {\n        return $(this.getDOMNode()).dropdown('get value');\n      }\n    }\n  };\n\n  common.init(exports, classData, {\n    defaults: {\n      render: form.fieldRenderer,\n      getDOMValue: function(el) {\n        return $(el).val();\n      }\n    },\n\n    ifReactBackbone: function(options) {\n      exports.defaultModelSetOptions = {validate: true, allowEmpty: true};\n      /**\n       * This mixin listenets for onChange events and set the associated model with that value.  If the\n       * model change succeeds, the \"error\" state attribute will be removed.\n       */\n      React.mixins.add('modelChangeSetter', {\n        modifyInputFieldProps: function (props) {\n          var onChange = props.onChange,\n            model = this.getModel(),\n            key = props.key;\n          if (props.set === undefined || props.set === true) {\n            props.set = exports.defaultModelSetOptions;\n            if (props.set) {\n              var self = this;\n              props.onChange = function (event) {\n                var model = self.getModel();\n                if (model) {\n                  var value = self.getDOMValue(event.currentTarget);\n                  if (self.setModelValue(value, props.set) !== false) {\n                    // we did not encounter a validation error\n                    if (self.state && self.state.error) {\n                      self.setState({error: false});\n                    }\n                  }\n                  if (onChange) {\n                    onChange.call(self, event);\n                  }\n                }\n              };\n            }\n          }\n          return props;\n        }\n      }, 'modelValueAccessor', 'modelEventBinder');\n      options.mixins = {all: ['modelChangeSetter', 'modelFieldValidator']};\n    }\n  });\n\n  return exports;\n};\n"]},"metadata":{},"sourceType":"script"}