{"ast":null,"code":"export function GetQuotesFromLocalStorage(quotesName, seedData) {\n  try {\n    var jsonQuotes = [];\n    var jsonQuotes = localStorage.getItem(quotesName);\n\n    if (jsonQuotes === '' || jsonQuotes === null) {\n      localStorage.setItem(quotesName, JSON.stringify(seedData));\n      console.log(\"setting local storage from 'seedData'\");\n      jsonQuotes = localStorage.getItem(quotesName);\n    }\n\n    return JSON.parse(jsonQuotes);\n  } catch (err) {\n    console.log(\"Error getting quotes from local storage: \\n\" + err);\n  }\n}\nexport function AddQuoteToLocalStorage(quotesName, quote, seedData) {\n  try {\n    var quotes = GetQuotesFromLocalStorage(quotesName, seedData);\n\n    for (var i in quotes) {\n      if (quotes[i].id == quote.id) {\n        quotes[i] == quote;\n        localStorage.setItem(quotesName, JSON.stringify(quotes));\n      }\n    }\n  } catch (err) {\n    console.log(\"Error adding quote to local storage: \\n\" + err);\n    return;\n  }\n}\nexport function UpdateQuoteToLocalStorage(quotesName, quote, seedData) {\n  try {\n    var quotes = GetQuotesFromLocalStorage(quotesName, seedData);\n    var newId = GetNextAvailableId(quotes);\n    quote.id = newId;\n    console.log(\"Adding new quote with quoteId: \" + newId);\n    quotes.push(quote);\n    localStorage.setItem(quotesName, JSON.stringify(quotes));\n  } catch (err) {\n    console.log(\"Error adding quote to local storage: \\n\" + err);\n    return;\n  }\n}\nexport function RemoveQuoteFromLocalStorage(quotesName, quoteId) {\n  try {\n    var quotes = GetQuotesFromLocalStorage(quotesName);\n    var itemIndex = quotes.findIndex(x => x.id === quoteId);\n    console.log(\"Removing quoteId: \" + quoteId + \" at index :\" + itemIndex);\n    quotes.splice(itemIndex, 1);\n    localStorage.setItem(quotesName, JSON.stringify(quotes));\n  } catch (err) {\n    console.log(\"Error removing quote from local storage: \\n\" + err);\n    return;\n  }\n}\n\nfunction GetNextAvailableId(quotes) {\n  if (quotes == '') {\n    return \"1\";\n  }\n\n  var ids = quotes.map(q => q.id);\n  ids.sort((a, b) => b - a);\n  var latestId = ids[0];\n  latestId++;\n  console.log(\"nextId: \" + latestId);\n  return latestId;\n}\n\nexport function GetSuburbList(postCodes, stateName) {\n  var suburbList = [];\n  var p = [];\n  postCodes.map(postCode => {\n    if (postCode.STATE_NAME == stateName) {\n      p.push(postCode.SUBURB_NAME);\n    }\n  });\n  var sortedSuburbList = p.sort();\n\n  for (var id = 0; id < sortedSuburbList.length; id++) {\n    suburbList.push({\n      text: id,\n      value: sortedSuburbList[id]\n    });\n  }\n\n  return suburbList;\n}\nexport function GetPostCodeFromSuburb(postCodes, suburbName) {\n  let po = postCodes.filter(postcode => postcode.SUBURB_NAME === suburbName);\n\n  if (po.length <= 0) {\n    console.log(po.length);\n    return null;\n  }\n\n  return po[0].POST_CODE;\n}","map":{"version":3,"sources":["/home/cbellee/repos/github/cbellee/parent-child-test/src/helpers/Helpers.js"],"names":["GetQuotesFromLocalStorage","quotesName","seedData","jsonQuotes","localStorage","getItem","setItem","JSON","stringify","console","log","parse","err","AddQuoteToLocalStorage","quote","quotes","i","id","UpdateQuoteToLocalStorage","newId","GetNextAvailableId","push","RemoveQuoteFromLocalStorage","quoteId","itemIndex","findIndex","x","splice","ids","map","q","sort","a","b","latestId","GetSuburbList","postCodes","stateName","suburbList","p","postCode","STATE_NAME","SUBURB_NAME","sortedSuburbList","length","text","value","GetPostCodeFromSuburb","suburbName","po","filter","postcode","POST_CODE"],"mappings":"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","sourcesContent":["export function GetQuotesFromLocalStorage(quotesName, seedData) {\n    try {\n        var jsonQuotes = [];\n        var jsonQuotes = localStorage.getItem(quotesName);\n        if (jsonQuotes === '' || jsonQuotes === null) {\n            localStorage.setItem(quotesName, JSON.stringify(seedData));\n            console.log(\"setting local storage from 'seedData'\");\n            jsonQuotes = localStorage.getItem(quotesName);\n        }\n        return JSON.parse(jsonQuotes);\n    } catch (err) {\n        console.log(\"Error getting quotes from local storage: \\n\" + err)\n    }\n}\n\nexport function AddQuoteToLocalStorage(quotesName, quote, seedData) {\n    try {\n        var quotes = GetQuotesFromLocalStorage(quotesName, seedData);\n        for (var i in quotes) {\n            if (quotes[i].id == quote.id) {\n                quotes[i] == quote;\n                localStorage.setItem(quotesName, JSON.stringify(quotes));\n            }\n        }\n        \n    } catch (err) {\n        console.log(\"Error adding quote to local storage: \\n\" + err)\n        return;\n    }\n}\n\nexport function UpdateQuoteToLocalStorage(quotesName, quote, seedData) {\n    try {\n        var quotes = GetQuotesFromLocalStorage(quotesName, seedData);\n        var newId = GetNextAvailableId(quotes);\n        quote.id = newId;\n        console.log(\"Adding new quote with quoteId: \" + newId);\n        quotes.push(quote);\n        localStorage.setItem(quotesName, JSON.stringify(quotes));\n    } catch (err) {\n        console.log(\"Error adding quote to local storage: \\n\" + err)\n        return;\n    }\n}\n\nexport function RemoveQuoteFromLocalStorage(quotesName, quoteId) {\n    try {\n        var quotes = GetQuotesFromLocalStorage(quotesName);\n        var itemIndex = quotes.findIndex(x => x.id === quoteId);\n        console.log(\"Removing quoteId: \" + quoteId + \" at index :\" + itemIndex);\n        quotes.splice(itemIndex, 1);\n        localStorage.setItem(quotesName, JSON.stringify(quotes));\n    } catch (err) {\n        console.log(\"Error removing quote from local storage: \\n\" + err)\n        return;\n    }\n}\n\nfunction GetNextAvailableId(quotes) {\n    if (quotes == '') {\n        return \"1\";\n    }\n    var ids = quotes.map(q => q.id);\n    ids.sort((a, b) => b - a);\n    var latestId = ids[0]\n    latestId++;\n    console.log(\"nextId: \" + latestId);\n    return latestId;\n}\n\nexport function GetSuburbList(postCodes, stateName) {\n    var suburbList = [];\n    var p = [];\n\n    postCodes.map(postCode => {\n        if (postCode.STATE_NAME == stateName) {\n            p.push(postCode.SUBURB_NAME);\n        }\n    });\n\n    var sortedSuburbList = p.sort();\n\n    for (var id = 0; id < sortedSuburbList.length; id++) {\n        suburbList.push({ text: id, value: sortedSuburbList[id] });\n    }\n    return suburbList;\n}\n\nexport function GetPostCodeFromSuburb(postCodes, suburbName) {\n    let po = postCodes.filter(postcode => postcode.SUBURB_NAME === suburbName);\n    if (po.length <= 0) {\n        console.log(po.length);\n        return null;\n    }\n    return po[0].POST_CODE;\n}\n"]},"metadata":{},"sourceType":"module"}