{"ast":null,"code":"module.exports = function (React, common) {\n  var exports = {\n    errorRenderer: function (error, children) {\n      children.push(React.DOM.div({\n        className: 'ui red pointing top ui label'\n      }, error));\n    },\n    // apply an icon to a button\n    applyIcon: function (context) {\n      var _children = [];\n\n      _children.push(React.DOM.i({\n        className: 'icon ' + context.icon\n      }));\n\n      React.Children.forEach(context.children, function (child) {\n        _children.push(child);\n      });\n      context.children = _children;\n    },\n    // apply a loading state to a button\n    applyLoadingState: function (context) {\n      context.icon = 'loading';\n      context.disabled = true;\n\n      if (this.props.loadingMessage) {\n        context.children = this.props.loadingMessage;\n      }\n    },\n    fieldRenderer: function () {\n      var props = this.props,\n          state = this.state || {},\n          className = common.mergeClassNames('field', this._controlClassName && this._controlClassName()),\n          id = this.props.id;\n      labelAfter = props.labelAfter !== undefined ? props.labelAfter : this.defaultLabelAfter, inlineLabel = props.inlineLabel !== undefined ? props.inlineLabel : this.defaultInlineLabel, containerClass = common.mergeClassNames(props.containerClass, this.defaultContainerClass && this.defaultContainerClass()), inputFieldProps = common.omit(props, ['label', 'disabled', 'fieldClass', 'value']), error = props.error || state.error;\n\n      if (error) {\n        className = common.mergeClassNames(className, 'error');\n      }\n\n      if (this.props.disabled) {\n        className = common.mergeClassNames(className, 'disabled');\n      }\n\n      if (props.fieldClass) {\n        className = common.mergeClassNames(props.fieldClass, className);\n      }\n\n      if (props.label && !id) {\n        id = common.uniqueId();\n      }\n\n      if (state.loading || props.loading) {\n        containerClass = common.mergeClassNames(containerClass, 'loading');\n      }\n\n      inputFieldProps.id = id;\n      inputFieldProps.defaultDisabled = this.props.disabled;\n\n      if (this.modifyInputFieldProps) {\n        inputFieldProps = this.modifyInputFieldProps(inputFieldProps);\n      }\n\n      var inputField = this.renderInput(inputFieldProps),\n          label = props.label ? React.DOM.label({\n        htmlFor: id\n      }, props.label) : undefined,\n          fieldChildren = [],\n          containerChildren = [];\n\n      if (containerClass) {\n        containerChildren.push(inputField);\n\n        if (inlineLabel && label) {\n          containerChildren.splice(labelAfter ? 1 : 0, 0, label);\n          label = undefined;\n        }\n\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, containerChildren);\n          } else {\n            exports.errorRenderer.call(this, error, containerChildren);\n          }\n        }\n\n        var container = React.DOM.div({\n          className: containerClass\n        }, containerChildren);\n\n        if (label) {\n          fieldChildren.push(container);\n        } else {\n          return container;\n        }\n      } else if (!label) {\n        return inputField;\n      } else {\n        fieldChildren.push(inputField);\n\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, fieldChildren);\n          } else {\n            exports.errorRenderer.call(this, error, fieldChildren);\n          }\n        }\n      }\n\n      if (label) {\n        fieldChildren.splice(labelAfter ? 1 : 0, 0, label);\n      }\n\n      return React.DOM.div({\n        className: className\n      }, fieldChildren);\n    }\n  };\n  var classData = {\n    /*** Form\n     * A form control which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***loading***: true if the form is in a loading state\n     * - ***className***: additional form class name (\"ui form segment\") will already be applied\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Form***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Form = rsui.form.Form;\n     *     <Form className=\"my-class\" loading={isLoading} onSubmit={handleSubmit}> ... </Form>\n     ***/\n    Form: {\n      render: function () {\n        var props = this.props,\n            loading = props.loading || this.state && this.state.loading;\n        attributes = common.defaults({\n          className: common.mergeClassNames('ui form', this._className, props.className, loading && 'loading')\n        }, this.props);\n        return React.DOM.form(attributes, props.children);\n      }\n    },\n\n    /*** Control\n     * Form field control meant to provide a label and additon field wrapper elements to\n     * arbitrary nested content\n     *\n     * Properties\n     * ----------\n     * - ***id***: the id used for the label (for attribute)\n     * - ***label***: the field label\n     * - ***inlineLabel***: true if the label should be included as a sibling to the nested content\n     * - ***labelAfter***: true if the inline label should be applied as the last sibling\n     * - ***containerClass***: the inner container element class name\n     * - ***className***: the outer field element class name\n     * - ***disabled***: true if the field should render as disabled\n     * - ***loading***: true if the field should render as loading\n     *\n     * Overrides\n     * ---------\n     * - ***fieldRenderer***: function which acts as the render method for this component\n     * - ***mixins.Control***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Control = rsui.form.Control;\n     *     <Control label=\"Foo\" error=\"some error message to display\"> some input field </Control>\n     ***/\n    Control: {\n      render: exports.fieldRenderer,\n      renderInput: function () {\n        return this.props.children;\n      },\n      _controlClassName: function () {\n        return this._className;\n      }\n    },\n\n    /*** Button\n     * A standard input button which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***icon***: the [icon name](http://semantic-ui.com/elements/icon.html)\n     * - ***className***: additional button class name (\"ui button\" will already be applied)\n     * - ***disabled***: true if the button should be disabled\n     * - ***loading***: true if the button is in a loading state\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Button***: default mixins that should be applied\n     * - ***applyIcon***: ```function({children, className, disabled, icon})```\n     *     apply the icon and update any data for rendering\n     * - ***applyLoadingState***: ```function({children, className, disabled, icon})```\n     *     apply a loading state and update any data for rendering\n     *\n     * Example\n     * --------\n     *     var Button = rsui.form.Button;\n     *     <Button icon=\"comment\" onClick={myClickHandler}> Click me </Control>\n     *     <Button loading={true} label=\"This is loading\"/>\n     ***/\n    Button: {\n      render: function () {\n        var props = this.props,\n            state = this.state || {},\n            context = {\n          children: props.children,\n          className: props.className,\n          disabled: props.disabled || state.disabled,\n          icon: props.icon\n        };\n\n        if (this.props.label) {\n          context.children = [this.props.label];\n        }\n\n        if (this.props.loading || state.loading) {\n          exports.applyLoadingState.call(this, context);\n        }\n\n        if (context.icon) {\n          exports.applyIcon.call(this, context);\n        }\n\n        if (context.disabled) {\n          context.className += ' disabled';\n        }\n\n        var attributes = common.defaults({\n          className: common.mergeClassNames('ui button', this._className, context.className)\n        }, this.props);\n        return React.DOM.button(attributes, context.children);\n      }\n    }\n  };\n  common.init(exports, classData, {\n    ifReactBackbone: function (options) {\n      options.mixins = {\n        Button: ['modelLoadOn'],\n        Form: ['modelAsyncListener']\n      };\n    }\n  });\n  return exports;\n};","map":{"version":3,"sources":["/home/cbellee/repos/github/cbellee/parent-child-test/node_modules/react-semantic-ui/lib/form.js"],"names":["module","exports","React","common","errorRenderer","error","children","push","DOM","div","className","applyIcon","context","_children","i","icon","Children","forEach","child","applyLoadingState","disabled","props","loadingMessage","fieldRenderer","state","mergeClassNames","_controlClassName","id","labelAfter","undefined","defaultLabelAfter","inlineLabel","defaultInlineLabel","containerClass","defaultContainerClass","inputFieldProps","omit","fieldClass","label","uniqueId","loading","defaultDisabled","modifyInputFieldProps","inputField","renderInput","htmlFor","fieldChildren","containerChildren","splice","call","container","classData","Form","render","attributes","defaults","_className","form","Control","Button","button","init","ifReactBackbone","options","mixins"],"mappings":"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","sourcesContent":["module.exports = function(React, common) {\n  var exports = {\n\n    errorRenderer: function(error, children) {\n      children.push(React.DOM.div({className: 'ui red pointing top ui label'}, error));\n    },\n\n    // apply an icon to a button\n    applyIcon: function(context) {\n      var _children = [];\n      _children.push(React.DOM.i({className: 'icon ' + context.icon}));\n      React.Children.forEach(context.children, function(child) {\n        _children.push(child);\n      });\n      context.children = _children;\n    },\n\n    // apply a loading state to a button\n    applyLoadingState: function(context) {\n      context.icon = 'loading';\n      context.disabled = true;\n      if (this.props.loadingMessage) {\n        context.children = this.props.loadingMessage;\n      }\n    },\n\n    fieldRenderer: function() {\n      var props = this.props,\n          state = this.state || {},\n          className = common.mergeClassNames('field', this._controlClassName && this._controlClassName()),\n          id = this.props.id;\n          labelAfter = props.labelAfter !== undefined ? props.labelAfter : this.defaultLabelAfter,\n          inlineLabel = props.inlineLabel !== undefined ? props.inlineLabel : this.defaultInlineLabel,\n          containerClass = common.mergeClassNames(\n            props.containerClass, this.defaultContainerClass && this.defaultContainerClass()),\n          inputFieldProps = common.omit(props, ['label', 'disabled', 'fieldClass', 'value']),\n          error = props.error || state.error;\n\n      if (error) {\n        className = common.mergeClassNames(className, 'error');\n      }\n      if (this.props.disabled) {\n        className = common.mergeClassNames(className, 'disabled');\n      }\n      if (props.fieldClass) {\n        className = common.mergeClassNames(props.fieldClass, className);\n      }\n      if (props.label && !id) {\n        id = common.uniqueId();\n      }\n      if (state.loading || props.loading) {\n        containerClass = common.mergeClassNames(containerClass, 'loading');\n      }\n\n      inputFieldProps.id = id;\n      inputFieldProps.defaultDisabled = this.props.disabled;\n      if (this.modifyInputFieldProps) {\n        inputFieldProps = this.modifyInputFieldProps(inputFieldProps);\n      }\n\n      var inputField = this.renderInput(inputFieldProps),\n          label = props.label ? React.DOM.label({htmlFor: id}, props.label) : undefined,\n          fieldChildren = [],\n          containerChildren = [];\n\n      if (containerClass) {\n        containerChildren.push(inputField);\n        if (inlineLabel && label) {\n          containerChildren.splice(labelAfter?1:0, 0, label);\n          label = undefined;\n        }\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, containerChildren);\n          } else {\n            exports.errorRenderer.call(this, error, containerChildren);\n          }\n        }\n        var container = React.DOM.div({className: containerClass}, containerChildren);\n        if (label) {\n          fieldChildren.push(container);\n        } else {\n          return container;\n        }\n      } else if (!label) {\n        return inputField;\n      } else {\n        fieldChildren.push(inputField);\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, fieldChildren);\n          } else {\n            exports.errorRenderer.call(this, error, fieldChildren);\n          }\n        }\n      }\n      if (label) {\n        fieldChildren.splice(labelAfter ? 1 : 0, 0, label);\n      }\n      return React.DOM.div({className: className}, fieldChildren);\n    }\n  };\n\n  var classData = {\n\n    /*** Form\n     * A form control which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***loading***: true if the form is in a loading state\n     * - ***className***: additional form class name (\"ui form segment\") will already be applied\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Form***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Form = rsui.form.Form;\n     *     <Form className=\"my-class\" loading={isLoading} onSubmit={handleSubmit}> ... </Form>\n     ***/\n    Form: {\n      render: function() {\n        var props = this.props,\n            loading = props.loading || this.state && this.state.loading;\n            attributes = common.defaults({\n              className: common.mergeClassNames('ui form', this._className, props.className, loading && 'loading')\n            }, this.props);\n        return React.DOM.form(attributes, props.children);\n      }\n    },\n\n    /*** Control\n     * Form field control meant to provide a label and additon field wrapper elements to\n     * arbitrary nested content\n     *\n     * Properties\n     * ----------\n     * - ***id***: the id used for the label (for attribute)\n     * - ***label***: the field label\n     * - ***inlineLabel***: true if the label should be included as a sibling to the nested content\n     * - ***labelAfter***: true if the inline label should be applied as the last sibling\n     * - ***containerClass***: the inner container element class name\n     * - ***className***: the outer field element class name\n     * - ***disabled***: true if the field should render as disabled\n     * - ***loading***: true if the field should render as loading\n     *\n     * Overrides\n     * ---------\n     * - ***fieldRenderer***: function which acts as the render method for this component\n     * - ***mixins.Control***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Control = rsui.form.Control;\n     *     <Control label=\"Foo\" error=\"some error message to display\"> some input field </Control>\n     ***/\n    Control: {\n      render: exports.fieldRenderer,\n      renderInput: function() {\n        return this.props.children;\n      },\n      _controlClassName: function() {\n        return  this._className;\n      }\n    },\n\n    /*** Button\n     * A standard input button which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***icon***: the [icon name](http://semantic-ui.com/elements/icon.html)\n     * - ***className***: additional button class name (\"ui button\" will already be applied)\n     * - ***disabled***: true if the button should be disabled\n     * - ***loading***: true if the button is in a loading state\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Button***: default mixins that should be applied\n     * - ***applyIcon***: ```function({children, className, disabled, icon})```\n     *     apply the icon and update any data for rendering\n     * - ***applyLoadingState***: ```function({children, className, disabled, icon})```\n     *     apply a loading state and update any data for rendering\n     *\n     * Example\n     * --------\n     *     var Button = rsui.form.Button;\n     *     <Button icon=\"comment\" onClick={myClickHandler}> Click me </Control>\n     *     <Button loading={true} label=\"This is loading\"/>\n     ***/\n    Button: {\n      render: function() {\n        var props = this.props,\n            state = this.state || {},\n            context = {\n              children: props.children,\n              className: props.className,\n              disabled: props.disabled || state.disabled,\n              icon: props.icon\n            };\n        if (this.props.label) {\n          context.children = [this.props.label];\n        }\n        if (this.props.loading || state.loading) {\n          exports.applyLoadingState.call(this, context);\n        }\n        if (context.icon) {\n          exports.applyIcon.call(this, context);\n        }\n        if (context.disabled) {\n          context.className += ' disabled';\n        }\n        var attributes = common.defaults({\n          className: common.mergeClassNames('ui button', this._className, context.className)\n        }, this.props);\n        return React.DOM.button(attributes, context.children);\n      }\n    }\n  };\n\n  common.init(exports, classData, {\n    ifReactBackbone: function(options) {\n      options.mixins = {\n        Button: ['modelLoadOn'],\n        Form: ['modelAsyncListener']\n      };\n    }\n  });\n\n  return exports;\n};\n"]},"metadata":{},"sourceType":"script"}